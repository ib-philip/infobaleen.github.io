{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the docs! table th:first-of-type { width: 33%; } table th:nth-of-type(2) { width: 33%; } table th:nth-of-type(3) { width: 33%; } table th:nth-of-type(4) { width: 30%; } Analytics Segmentations Recommendations Gain insights on your business from our interactive and customizable dashboards by diving deep into your trove of data. Learn what drives your new customers, find out what makes your customers churn, explore your clusters and segments and much more. Dashboards \u00bb Make powerful segmentations for your marketing campaigns and export your results directly to your CRM-system or a marketing tool like Facebook Ads or Google Ads. Target specific products and let our machine learning model segment users optimally according to products you want to sell and your campaign goals. Auto-targeting \u00bb Clustering \u00bb Use personalized product recommendations in your marketing to make your products relevant at all times. Add them on your landing page, in your checkout flow or use them to automate your email content. Create customizable API profiles with filters and rules based on your product meta data, and apply them to different use cases. Ex one for your landing page, one for your user browse sessions and one for your email content. Recommendations \u00bb","title":"Home"},{"location":"#welcome-to-the-docs","text":"table th:first-of-type { width: 33%; } table th:nth-of-type(2) { width: 33%; } table th:nth-of-type(3) { width: 33%; } table th:nth-of-type(4) { width: 30%; }","title":"Welcome to the docs!"},{"location":"Platform/Analytics/Customer-Insights/","text":"Customer Insights - Propensity to Purchase The Propensity to Purchase-model classifies customers by their likelihood to purchase in the future - based on historical data. This insight can be integrated into marketing and sales strategies. To understand the chart here is an explanation: Each customer is grouped based on number of orders (O = 1, O = 2, O = 3, etc), and the chart displays a colored line for each group. For each group the propensity (y-axis) specifies the probability of another purchase for a customer within the group For an example, see the group hovered in the below image. Here we can see that it's 24,3% probability that a customer that has one order and has been inactive 1 month, will perform another purchase before the specified inactive period (6 months) Below the image you can add more groups with customers that have more orders (in the image we show groups with customers having 1-5 orders). You can also edit the parameter that specifies the number of months until user becomes inactive. By specifying this to 1 month you can get an idea of how money customers will move from having 1 order to 2 orders, from 2 orders to 3 orders, etc within the coming month. The \"Months of inactivity to show\"-bar only changes the number of months shown in the chart.","title":"Customer Insights"},{"location":"Platform/Analytics/Customer-Insights/#customer-insights-propensity-to-purchase","text":"The Propensity to Purchase-model classifies customers by their likelihood to purchase in the future - based on historical data. This insight can be integrated into marketing and sales strategies. To understand the chart here is an explanation: Each customer is grouped based on number of orders (O = 1, O = 2, O = 3, etc), and the chart displays a colored line for each group. For each group the propensity (y-axis) specifies the probability of another purchase for a customer within the group For an example, see the group hovered in the below image. Here we can see that it's 24,3% probability that a customer that has one order and has been inactive 1 month, will perform another purchase before the specified inactive period (6 months) Below the image you can add more groups with customers that have more orders (in the image we show groups with customers having 1-5 orders). You can also edit the parameter that specifies the number of months until user becomes inactive. By specifying this to 1 month you can get an idea of how money customers will move from having 1 order to 2 orders, from 2 orders to 3 orders, etc within the coming month. The \"Months of inactivity to show\"-bar only changes the number of months shown in the chart.","title":"Customer Insights - Propensity to Purchase"},{"location":"Platform/Analytics/Dashboards/","text":"Create dashboards You can customize dashboards to visualize various information and results based on your data. Dashboards can be created by clicking the + icon in the dropdown menu, or by clicking the purple plus sign in the upper right corner of the dashboard card. When you create a dashboard your are asked for the below fieds: Name : The name you want to give to your dashboard. You can change this name later. Select Role : One of interaction , user , and item . Defines what data the dashboard should be based on, and in most cases it should be interaction . Select number of columns : Specifies the number of columns used in the grid system to fit dashboards. The default value is used in most cases. Import config : This field can be used if you want to copy or export a dashboard from another platform. It is left blank in most cases. Click Create to create the dashboard. You are now ready to add elements! Note! After adding elements or editing the dashboard, remember to click Save in the top right corner. Add element Metric A metric is a single number, wich means that you can not show a field in a metric element (a field is an array of metrics). you can convert a field into a metric by writing an expression ex. SUM(field) this returns a metric. Bar Chart A bar chart shows categorical data with rectangular bars indicating the distributions of the data , in the picture below, we for example see amount of unique customers per country , the bar charts can be used to adapt the dashboard to show only data from one specific country. Simply press the country you want to see information about, and the dashboard will update accordingly. Line Chart A line chart plots a graph with data points connected to a chosen metric, example below for example shows revenue over time. Hovering over the line chart data points, the revenue for that time will show. Default (line chart) Under default you can choose what values you want to include in your line chart, you can also select if you want the view to be from day to week, month etc. The Format selection lets you choose how many decimals you want, if you want the values to be shown as a percentage (%). The Limit lets you decide how many data points you want to show (the dots marked on the line). Style (line chart) Here you can change the appearance of the linechart in the dashboards, feel free to test how the different margin settings affect the look of the line chart! By changing the Title or the Sub title no values will be changed, by changing it the chosen values only gets an alias. Advanced (line chart) In the advanced tab you can select a Group key , you can read what that means here Select group key By addining a field in the select group key the line chart will show multiple lines where each line represents a category in the selected field. This function should be combined with a bar chart where you can create a filter for the selected field. by filtering out categories in the barchart the line chart will show the remaning categories. By filtering out a category in the barchart the line representing this category is removed from the line chart. Histogram A histogram is a graphical representation that shows data in specified ranges as vertical bins. It's similar to a bar chart. Date filter The Date filter lets you adapt your dashboards to only show data for a chosen period of time, there are some premade limits, for example last week, last year etc. These can be found and chosen on the top of the date filter box after pressing it, you can also select a specified range of days by using the calendar. Range filter Range filter allows you to only show data in the dashboards where a chosen value is within the chosen limit, for example if you only want to show data for items with prices between 100sek to 200sek. Filter Filter can be used to only show one category of chosen metric, and update the dashboard accordingly. Metric selector In the different elements added to your dashboard, for example a bar chart or line chart, there's the opportunity to select *metric* , if you then add a Metric selector and choose a metric, all the elements where *metric* has been chosen, will be updated to match the chosen metric in the Metric selector . Using this will allow quicker changes of the data shown, as you can use the metric selector instead of manually changing the other elements. Alluvial Chart An alluvial chart can be described as a flow diagram that represents changes in structures over time, for us this is mostly used to represent how segments of customers are changed over time, going from new, to lapsed (lost) customers. (There's a Color scale option under Style where the colors can be changed to blue/green/yellow/red instead of different shades of blue) Example of alluvial chart shown below. Markov Chart Table This element adds a table to the dashboard, if the table gets to wide there's a scroll bar furthest down in the table allowing horizontal scrolling. The table can be sorted by pressing on the value/text you want to sort by. Under Style in the edit screen of a table, there's an opportunity to add a Backround bar which visualize how large/small the different values in the table are in comparison to the others. Pivot A pivot table is used to visualize patterns and trends in large amounts of data, it can for example be used to show amount of lapsed customers per order cohort shown in the example below. Image grid The image grid shows pictures of products in a dashboard. Segments Lets you show data for only a chosen segment, these segments can be created under the Segmentations part of the platform. Categories Similar to barchart, categories let's you choose what category to show data for, when the data is several categories in one cell, for example Color = [red;blue] where red and blue are not correlated. Text Content The text content element is the most used element, it's basically just text that can be adapted through markdown language, for example # = header1 (largest) ## = header2, ### header3 etc.","title":"Dashboards"},{"location":"Platform/Analytics/Dashboards/#create-dashboards","text":"You can customize dashboards to visualize various information and results based on your data. Dashboards can be created by clicking the + icon in the dropdown menu, or by clicking the purple plus sign in the upper right corner of the dashboard card. When you create a dashboard your are asked for the below fieds: Name : The name you want to give to your dashboard. You can change this name later. Select Role : One of interaction , user , and item . Defines what data the dashboard should be based on, and in most cases it should be interaction . Select number of columns : Specifies the number of columns used in the grid system to fit dashboards. The default value is used in most cases. Import config : This field can be used if you want to copy or export a dashboard from another platform. It is left blank in most cases. Click Create to create the dashboard. You are now ready to add elements! Note! After adding elements or editing the dashboard, remember to click Save in the top right corner.","title":"Create dashboards"},{"location":"Platform/Analytics/Dashboards/#add-element","text":"","title":"Add element"},{"location":"Platform/Analytics/Dashboards/#metric","text":"A metric is a single number, wich means that you can not show a field in a metric element (a field is an array of metrics). you can convert a field into a metric by writing an expression ex. SUM(field) this returns a metric.","title":"Metric"},{"location":"Platform/Analytics/Dashboards/#bar-chart","text":"A bar chart shows categorical data with rectangular bars indicating the distributions of the data , in the picture below, we for example see amount of unique customers per country , the bar charts can be used to adapt the dashboard to show only data from one specific country. Simply press the country you want to see information about, and the dashboard will update accordingly.","title":"Bar Chart"},{"location":"Platform/Analytics/Dashboards/#line-chart","text":"A line chart plots a graph with data points connected to a chosen metric, example below for example shows revenue over time. Hovering over the line chart data points, the revenue for that time will show.","title":"Line Chart"},{"location":"Platform/Analytics/Dashboards/#default-line-chart","text":"Under default you can choose what values you want to include in your line chart, you can also select if you want the view to be from day to week, month etc. The Format selection lets you choose how many decimals you want, if you want the values to be shown as a percentage (%). The Limit lets you decide how many data points you want to show (the dots marked on the line).","title":"Default (line chart)"},{"location":"Platform/Analytics/Dashboards/#style-line-chart","text":"Here you can change the appearance of the linechart in the dashboards, feel free to test how the different margin settings affect the look of the line chart! By changing the Title or the Sub title no values will be changed, by changing it the chosen values only gets an alias.","title":"Style (line chart)"},{"location":"Platform/Analytics/Dashboards/#advanced-line-chart","text":"In the advanced tab you can select a Group key , you can read what that means here","title":"Advanced (line chart)"},{"location":"Platform/Analytics/Dashboards/#select-group-key","text":"By addining a field in the select group key the line chart will show multiple lines where each line represents a category in the selected field. This function should be combined with a bar chart where you can create a filter for the selected field. by filtering out categories in the barchart the line chart will show the remaning categories. By filtering out a category in the barchart the line representing this category is removed from the line chart.","title":"Select group key"},{"location":"Platform/Analytics/Dashboards/#histogram","text":"A histogram is a graphical representation that shows data in specified ranges as vertical bins. It's similar to a bar chart.","title":"Histogram"},{"location":"Platform/Analytics/Dashboards/#date-filter","text":"The Date filter lets you adapt your dashboards to only show data for a chosen period of time, there are some premade limits, for example last week, last year etc. These can be found and chosen on the top of the date filter box after pressing it, you can also select a specified range of days by using the calendar.","title":"Date filter"},{"location":"Platform/Analytics/Dashboards/#range-filter","text":"Range filter allows you to only show data in the dashboards where a chosen value is within the chosen limit, for example if you only want to show data for items with prices between 100sek to 200sek.","title":"Range filter"},{"location":"Platform/Analytics/Dashboards/#filter","text":"Filter can be used to only show one category of chosen metric, and update the dashboard accordingly.","title":"Filter"},{"location":"Platform/Analytics/Dashboards/#metric-selector","text":"In the different elements added to your dashboard, for example a bar chart or line chart, there's the opportunity to select *metric* , if you then add a Metric selector and choose a metric, all the elements where *metric* has been chosen, will be updated to match the chosen metric in the Metric selector . Using this will allow quicker changes of the data shown, as you can use the metric selector instead of manually changing the other elements.","title":"Metric selector"},{"location":"Platform/Analytics/Dashboards/#alluvial-chart","text":"An alluvial chart can be described as a flow diagram that represents changes in structures over time, for us this is mostly used to represent how segments of customers are changed over time, going from new, to lapsed (lost) customers. (There's a Color scale option under Style where the colors can be changed to blue/green/yellow/red instead of different shades of blue) Example of alluvial chart shown below.","title":"Alluvial Chart"},{"location":"Platform/Analytics/Dashboards/#markov-chart","text":"","title":"Markov Chart"},{"location":"Platform/Analytics/Dashboards/#table","text":"This element adds a table to the dashboard, if the table gets to wide there's a scroll bar furthest down in the table allowing horizontal scrolling. The table can be sorted by pressing on the value/text you want to sort by. Under Style in the edit screen of a table, there's an opportunity to add a Backround bar which visualize how large/small the different values in the table are in comparison to the others.","title":"Table"},{"location":"Platform/Analytics/Dashboards/#pivot","text":"A pivot table is used to visualize patterns and trends in large amounts of data, it can for example be used to show amount of lapsed customers per order cohort shown in the example below.","title":"Pivot"},{"location":"Platform/Analytics/Dashboards/#image-grid","text":"The image grid shows pictures of products in a dashboard.","title":"Image grid"},{"location":"Platform/Analytics/Dashboards/#segments","text":"Lets you show data for only a chosen segment, these segments can be created under the Segmentations part of the platform.","title":"Segments"},{"location":"Platform/Analytics/Dashboards/#categories","text":"Similar to barchart, categories let's you choose what category to show data for, when the data is several categories in one cell, for example Color = [red;blue] where red and blue are not correlated.","title":"Categories"},{"location":"Platform/Analytics/Dashboards/#text-content","text":"The text content element is the most used element, it's basically just text that can be adapted through markdown language, for example # = header1 (largest) ## = header2, ### header3 etc.","title":"Text Content"},{"location":"Platform/Menu/Account/API-Keys/","text":"API Keys API keys are primarily used for accessing the recommendation API to fetch product recommendations to your website or your email campaigns. \" Test your API request Create a new API key Open ubuntu Copy from your API key curl 'https://`PLATFORM`.infobaleen.com/api/v1/api-profiles/`473`/recommendations/user-to-items' -d '{\"Limit\":3,\"User\":\"`X`\"}' -H 'Authorization: `KEY`' Use Rex in the user table under Model > Users and replace X in the curl to verify you get the same results as the recommendations for that user NOTE: If you try to use the curl command in Windows it will not work note the difference from the curl above with \\ and .exe curl`.exe` 'https://PLATFORM.infobaleen.com/api/v1/api-profiles/473/recommendations/user-to-items' -d '{`\\`\"Limit`\\`\":3,`\\`\"User`\\`\":`\\`\"X`\\`\"}' -H 'Authorization: KEY'","title":"API Keys"},{"location":"Platform/Menu/Account/API-Keys/#api-keys","text":"API keys are primarily used for accessing the recommendation API to fetch product recommendations to your website or your email campaigns.","title":"API Keys"},{"location":"Platform/Menu/Account/API-Keys/#test-your-api-request","text":"Create a new API key Open ubuntu Copy from your API key curl 'https://`PLATFORM`.infobaleen.com/api/v1/api-profiles/`473`/recommendations/user-to-items' -d '{\"Limit\":3,\"User\":\"`X`\"}' -H 'Authorization: `KEY`' Use Rex in the user table under Model > Users and replace X in the curl to verify you get the same results as the recommendations for that user NOTE: If you try to use the curl command in Windows it will not work note the difference from the curl above with \\ and .exe curl`.exe` 'https://PLATFORM.infobaleen.com/api/v1/api-profiles/473/recommendations/user-to-items' -d '{`\\`\"Limit`\\`\":3,`\\`\"User`\\`\":`\\`\"X`\\`\"}' -H 'Authorization: KEY'","title":"\" Test your API request"},{"location":"Platform/Menu/Account/Logout/","text":"Logout Press to logout from the platform.","title":"Logout"},{"location":"Platform/Menu/Account/Logout/#logout","text":"Press to logout from the platform.","title":"Logout"},{"location":"Platform/Menu/Account/Users/","text":"Users Here you can add, or manage the persons with access to the platform, you can also see how long it was since someone visited the platform.","title":"Users"},{"location":"Platform/Menu/Account/Users/#users","text":"Here you can add, or manage the persons with access to the platform, you can also see how long it was since someone visited the platform.","title":"Users"},{"location":"Platform/Menu/Admin/Clear-CH-chache/","text":"Clear CH chache","title":"Clear CH chache"},{"location":"Platform/Menu/Admin/Clear-CH-chache/#clear-ch-chache","text":"","title":"Clear CH chache"},{"location":"Platform/Menu/Admin/Configuration/","text":"Configuration In the configuration page you can add connections to data, for example databases, and you can also add connections to integrations that you want to export data to, for example an email service. Databases A database configuration is set up to fetch data into the platform, and it can be a connection to something like a data lake or a mysql server. It can look something like in the image below. Note that a parameter like ${db-user} needs to be added in the Secrets page. Integrations An integration configuration is set up to export data from the platform. It can look something like the facebook-export in the image below (emails are exported to Facebook). Note that a parameter like ${fb-token} needs to be added in the Secrets page. Partner configuration Voyado The voyado config needs three parameters that are the same for all lakes. These can be found on Bitwarden under Infobaleen/Voyado. The fourth parameter is the lake endpoint. This is found in Voyado's Azure data lake Example: {\"Root\":\"/voyado/export\", \"Directories\": ['receipts'], \"ClientId\": \"${CLIENT_ID}\", \"ClientSecret\": \"${CLIENT_SECRET}\", \"DirectoryId\": \"${DIRECTORY_ID}\", \"LakeUri\":\"bangerhadcorestordlsprod.azuredatalakestore.net\"} Some comments: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ Rule Integration with rule enables you export your Segmentation campaigns to rule Name: should be set to rule as standard Driver: rule config: {\"ApiKey\":\"${rule_api_key}\",\"KeyField\":\"email\"} where \"ApiKey\":\"${rule_api_key}\" is set in Secrets and \"KeyField\":\"email\" is set Default User Field: field name + KeyField wich is set to email in this case ex. if field name = email the Default user field becomes email email Name used in exports: ${PARENT_NAME}: ${INDEX_NAME} Optional User Fields: No idea.","title":"Configuration"},{"location":"Platform/Menu/Admin/Configuration/#configuration","text":"In the configuration page you can add connections to data, for example databases, and you can also add connections to integrations that you want to export data to, for example an email service.","title":"Configuration"},{"location":"Platform/Menu/Admin/Configuration/#databases","text":"A database configuration is set up to fetch data into the platform, and it can be a connection to something like a data lake or a mysql server. It can look something like in the image below. Note that a parameter like ${db-user} needs to be added in the Secrets page.","title":"Databases"},{"location":"Platform/Menu/Admin/Configuration/#integrations","text":"An integration configuration is set up to export data from the platform. It can look something like the facebook-export in the image below (emails are exported to Facebook). Note that a parameter like ${fb-token} needs to be added in the Secrets page.","title":"Integrations"},{"location":"Platform/Menu/Admin/Configuration/#partner-configuration","text":"","title":"Partner configuration"},{"location":"Platform/Menu/Admin/Configuration/#voyado","text":"The voyado config needs three parameters that are the same for all lakes. These can be found on Bitwarden under Infobaleen/Voyado. The fourth parameter is the lake endpoint. This is found in Voyado's Azure data lake Example: {\"Root\":\"/voyado/export\", \"Directories\": ['receipts'], \"ClientId\": \"${CLIENT_ID}\", \"ClientSecret\": \"${CLIENT_SECRET}\", \"DirectoryId\": \"${DIRECTORY_ID}\", \"LakeUri\":\"bangerhadcorestordlsprod.azuredatalakestore.net\"} Some comments: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/","title":"Voyado"},{"location":"Platform/Menu/Admin/Configuration/#rule","text":"Integration with rule enables you export your Segmentation campaigns to rule Name: should be set to rule as standard Driver: rule config: {\"ApiKey\":\"${rule_api_key}\",\"KeyField\":\"email\"} where \"ApiKey\":\"${rule_api_key}\" is set in Secrets and \"KeyField\":\"email\" is set Default User Field: field name + KeyField wich is set to email in this case ex. if field name = email the Default user field becomes email email Name used in exports: ${PARENT_NAME}: ${INDEX_NAME} Optional User Fields: No idea.","title":"Rule"},{"location":"Platform/Menu/Admin/Connections/","text":"Connections Shows the latest connections to the platform.","title":"Connections"},{"location":"Platform/Menu/Admin/Connections/#connections","text":"Shows the latest connections to the platform.","title":"Connections"},{"location":"Platform/Menu/Admin/Events/","text":"Events The events page lists all events taking place in the platform. The events include various things like source and data model updates as well as errors. The events page can also be reached with the clock icon in the top right corner.","title":"Events"},{"location":"Platform/Menu/Admin/Events/#events","text":"The events page lists all events taking place in the platform. The events include various things like source and data model updates as well as errors. The events page can also be reached with the clock icon in the top right corner.","title":"Events"},{"location":"Platform/Menu/Admin/Secrets/","text":"Secrets A secret can be seen as a password we want to hide, but use an alias for. An example of a secret is the API key we need to receive data from a data lake or similar. When creating a secret you need two things: * Label : the name of the secret * Secret : an API key or similar that we want to store, but that should not be visible.","title":"Secrets"},{"location":"Platform/Menu/Admin/Secrets/#secrets","text":"A secret can be seen as a password we want to hide, but use an alias for. An example of a secret is the API key we need to receive data from a data lake or similar. When creating a secret you need two things: * Label : the name of the secret * Secret : an API key or similar that we want to store, but that should not be visible.","title":"Secrets"},{"location":"Platform/Menu/Documentation/Agent/","text":"Agent: Filesystem query helper functions The agent supports a powerful query language for CSV files. Below are available helper functions and some practical examples that might be useful when setting up your sources. Operators and Functions x LIKE format x IN(a,b,...) a OR b a AND b a = b a < b a > b a <= b a >= b a <> b multiIf(cond1,val1,...,defaultVal) Ex: multiIf(a > 1, 'a>1', 'a<=1') sleep(millisec) Numerical abs(x) floor(x) ceil(x) round(x) least(a,b) greatest(a,b) Time (uses go's time formatting: eg. 2006-01-02 15:04:05) unixTimestamp(x [,format]) Ex: unixTimestamp('2015-01-01', '2006-01-02') => 1420070400 fromUnixtime(x [,format]) Ex: fromUnixTime(1420070400, '2006-01-02') => 2015-01-01 now() Ex: now() => 1571038684 String sluggify(x) Ex: sluggify('HelloWorld') => hello-world queryescape(x) QueryEscape escapes the string so it can be safely placed inside a URL query. match(pattern,name) (uses go's path.Match ) slice(x, start, stop, delimiter) Ex: slice('a-b-c', 0, 1, '-') => a sort(x,delimiter) Ex: sort('c-a-b') => a-b-c reverse(x, delimiter) Ex: reverse('abc', '') => cba , reverse('a-b-c') => c-b-a concatWs(delimiter,xs...) Ex: concatWs('-', 'a', 'b') => a-b coalesce(xs...) Ex: coalesce('', 'fallback') => fallback concat(xs...) Ex: concat('a', 'b') => ab replace(x,old,new) Ex: replace('foobar', 'bar', 'baz') => foobaz lower(x) upper(x) length(x) JSON pickJson(x, fields...) Ex: pickJson('{\"foo\":1, \"bar\":2, \"baz\":3}', 'foo', 'bar') => {\"foo\":1, \"bar\":2} Hash/rand rand() randInt() randInt(x) md5(x) xxHash63(x) xxHash64(x) identity(x) Ex: identity('a') => a File Details size() path() modifiedAt() depth() Special analyse() Anlayse column data. Ex: select analyse(price) from ... => {\"CountNum\":431359,\"CountEmpty\":0,\"CountString\":0,\"Sum\":555691303,\"Average\":1288.2339364285353,\"Min\":1,\"Max\":618993.5625} Join Inner joins are supported, but limited to only one joined table. The join must be written in the following format. Note that joins must load the secondary table data into RAM, so use this feature wisely. SELECT *, u.* from `transaction.csv` t JOIN `users.csv` u ON t.user_id = u.id Note that when referring to the joined table in the select , you must use an alias, but not for the from file. Sub queries Support for sub queries. Since the join support is limited, this is the typical use case for using sub queries SELECT * from `transactions.csv` WHERE user_id IN (SELECT id FROM `users.csv`) t Practical Examples Convert date to unix timestamp Uploaded interaction data requires a column with unix timestamp data, making this function useful. See different examples below depending on date format (go date format). See [https://yourbasic.org/golang/format-parse-string-time-date-example/] unix_timestamp(ts_string,<FORMAT>) unix_timestamp(ts_string,\"2006-01-02 15:04:05\") unix_timestamp(ts_string,\"2006-01-02T15:04:05Z\") Example: Age from time string round((now() - unix_timestamp(birth_year,\"2006-01-02\")) / (60 * 60 * 24 * 365)) as age String concatenation concat(title, '(', author, ', ', year, ')') as displayName Example: Building image urls concat('/api/v1/image?w=300&h=200&label=', queryEscape(english_title)) as dummy_image Multi if Example: Build filter variables For item id's that you want to exclude, build a variable and then filter on it in the data model setup. multiIf(_id IN (123, 456, 789) OR category_4='Candy', 1, 0) as is_irrelevant Example: Name from id multiIf( store_id = \"b92a0b68-3b4b-4fba-8711-a69100e940e9\",\"Ume\u00e5\", store_id = \"48292bda-f26c-428e-8de5-a69100e940e9\",\"G\u00f6teborg\", store_id = \"8d46721c-2368-480b-913a-a69100e940e9\",\"Stockholm\", 'unknown_store') as store,","title":"Agent"},{"location":"Platform/Menu/Documentation/Agent/#agent-filesystem-query-helper-functions","text":"The agent supports a powerful query language for CSV files. Below are available helper functions and some practical examples that might be useful when setting up your sources.","title":"Agent: Filesystem query helper functions"},{"location":"Platform/Menu/Documentation/Agent/#operators-and-functions","text":"x LIKE format x IN(a,b,...) a OR b a AND b a = b a < b a > b a <= b a >= b a <> b multiIf(cond1,val1,...,defaultVal) Ex: multiIf(a > 1, 'a>1', 'a<=1') sleep(millisec)","title":"Operators and Functions"},{"location":"Platform/Menu/Documentation/Agent/#numerical","text":"abs(x) floor(x) ceil(x) round(x) least(a,b) greatest(a,b)","title":"Numerical"},{"location":"Platform/Menu/Documentation/Agent/#time-uses-gos-time-formatting-eg-2006-01-02-150405","text":"unixTimestamp(x [,format]) Ex: unixTimestamp('2015-01-01', '2006-01-02') => 1420070400 fromUnixtime(x [,format]) Ex: fromUnixTime(1420070400, '2006-01-02') => 2015-01-01 now() Ex: now() => 1571038684","title":"Time (uses go's time formatting: eg. 2006-01-02 15:04:05)"},{"location":"Platform/Menu/Documentation/Agent/#string","text":"sluggify(x) Ex: sluggify('HelloWorld') => hello-world queryescape(x) QueryEscape escapes the string so it can be safely placed inside a URL query. match(pattern,name) (uses go's path.Match ) slice(x, start, stop, delimiter) Ex: slice('a-b-c', 0, 1, '-') => a sort(x,delimiter) Ex: sort('c-a-b') => a-b-c reverse(x, delimiter) Ex: reverse('abc', '') => cba , reverse('a-b-c') => c-b-a concatWs(delimiter,xs...) Ex: concatWs('-', 'a', 'b') => a-b coalesce(xs...) Ex: coalesce('', 'fallback') => fallback concat(xs...) Ex: concat('a', 'b') => ab replace(x,old,new) Ex: replace('foobar', 'bar', 'baz') => foobaz lower(x) upper(x) length(x)","title":"String"},{"location":"Platform/Menu/Documentation/Agent/#json","text":"pickJson(x, fields...) Ex: pickJson('{\"foo\":1, \"bar\":2, \"baz\":3}', 'foo', 'bar') => {\"foo\":1, \"bar\":2}","title":"JSON"},{"location":"Platform/Menu/Documentation/Agent/#hashrand","text":"rand() randInt() randInt(x) md5(x) xxHash63(x) xxHash64(x) identity(x) Ex: identity('a') => a","title":"Hash/rand"},{"location":"Platform/Menu/Documentation/Agent/#file-details","text":"size() path() modifiedAt() depth()","title":"File Details"},{"location":"Platform/Menu/Documentation/Agent/#special","text":"analyse() Anlayse column data. Ex: select analyse(price) from ... => {\"CountNum\":431359,\"CountEmpty\":0,\"CountString\":0,\"Sum\":555691303,\"Average\":1288.2339364285353,\"Min\":1,\"Max\":618993.5625}","title":"Special"},{"location":"Platform/Menu/Documentation/Agent/#join","text":"Inner joins are supported, but limited to only one joined table. The join must be written in the following format. Note that joins must load the secondary table data into RAM, so use this feature wisely. SELECT *, u.* from `transaction.csv` t JOIN `users.csv` u ON t.user_id = u.id Note that when referring to the joined table in the select , you must use an alias, but not for the from file.","title":"Join"},{"location":"Platform/Menu/Documentation/Agent/#sub-queries","text":"Support for sub queries. Since the join support is limited, this is the typical use case for using sub queries SELECT * from `transactions.csv` WHERE user_id IN (SELECT id FROM `users.csv`) t","title":"Sub queries"},{"location":"Platform/Menu/Documentation/Agent/#practical-examples","text":"","title":"Practical Examples"},{"location":"Platform/Menu/Documentation/Agent/#convert-date-to-unix-timestamp","text":"Uploaded interaction data requires a column with unix timestamp data, making this function useful. See different examples below depending on date format (go date format). See [https://yourbasic.org/golang/format-parse-string-time-date-example/] unix_timestamp(ts_string,<FORMAT>) unix_timestamp(ts_string,\"2006-01-02 15:04:05\") unix_timestamp(ts_string,\"2006-01-02T15:04:05Z\")","title":"Convert date to unix timestamp"},{"location":"Platform/Menu/Documentation/Agent/#example-age-from-time-string","text":"round((now() - unix_timestamp(birth_year,\"2006-01-02\")) / (60 * 60 * 24 * 365)) as age","title":"Example: Age from time string"},{"location":"Platform/Menu/Documentation/Agent/#string-concatenation","text":"concat(title, '(', author, ', ', year, ')') as displayName","title":"String concatenation"},{"location":"Platform/Menu/Documentation/Agent/#example-building-image-urls","text":"concat('/api/v1/image?w=300&h=200&label=', queryEscape(english_title)) as dummy_image","title":"Example: Building image urls"},{"location":"Platform/Menu/Documentation/Agent/#multi-if","text":"","title":"Multi if"},{"location":"Platform/Menu/Documentation/Agent/#example-build-filter-variables","text":"For item id's that you want to exclude, build a variable and then filter on it in the data model setup. multiIf(_id IN (123, 456, 789) OR category_4='Candy', 1, 0) as is_irrelevant","title":"Example: Build filter variables"},{"location":"Platform/Menu/Documentation/Agent/#example-name-from-id","text":"multiIf( store_id = \"b92a0b68-3b4b-4fba-8711-a69100e940e9\",\"Ume\u00e5\", store_id = \"48292bda-f26c-428e-8de5-a69100e940e9\",\"G\u00f6teborg\", store_id = \"8d46721c-2368-480b-913a-a69100e940e9\",\"Stockholm\", 'unknown_store') as store,","title":"Example: Name from id"},{"location":"Platform/Menu/Documentation/New-Issue/","text":"New issue If you've found something not working properly an issue can be created. If you have permissions, the link will take you to Github where the issue will be addressed.","title":"New Issue"},{"location":"Platform/Menu/Documentation/New-Issue/#new-issue","text":"If you've found something not working properly an issue can be created. If you have permissions, the link will take you to Github where the issue will be addressed.","title":"New issue"},{"location":"Platform/Menu/Documentation/Recommendations/","text":"Recommendations - API Documentation Authorization Requests are authenticated and authorized with API Keys. API keys can be managed from the application menu Account / Api keys . When sending a request, the API key is provided using the Authorization header. Recommendations Item recommendations from a data model are provided by the API in two ways, given a user (/user-to-items) or from a list of items (/items-to-items). User recommendations (user-to-items) User-to-items recommendations can be used to generate content for user landing pages, email marketing and similar. Given a user id, a list of recommended items is returned. POST /api/v1/data-models/<id>/recommendations/user-to-items Request parameters (JSON body) Input parameters Parameter Type Description User string User id to fetch item recommendations for Items array of strings Item IDs to build the recommendations from MinInteractionTs int Min timestamp for interactions to base the recommendations on MaxInteractions int Pick orders until MaxInteractions interactions are included MaxOrders int Pick orders until MaxOrders orders are included InteractionFilter SQL To select from history based on SQL query Persona Object {\"gender\": \"Female\", \"country_code\": \"SE\"} Logical parameters Parameter Type Description TrendFactor float Value between 0 and 1. 0 is used to base recommendations on similarity only, and 1 weights the recommendations on the current trend/popularity. Default is 1. Recurring boolean Allow recommending items already consumed by the user. Default is false. AllowedItems array of item ids Only items in AllowedItems is returned in the response ForcedItems array of item ids All items in ForcedItems is returned in the response BlockedItems array of item ids No items in the BlockedItems is returned in the response Candidates int number of items to consider. Default to all available items. Can be used for faster calculations. ItemFilterExpression SQL \"price>100\" ItemBoostExpression SQL \"toFloat(margin)\" Search string Experimental Full-text-search. Filter and boost based on search string. FieldLimits array of objects Ex: [{\"Field\":\"name\", \"Limit\": 2}] makes sure to not return more than 2 items of the same color. Context See example [{\"Name\":\"ageLimit\", \"FloatValue\":11},{\"Name\": \"genres\", \"ArrayValues\": \"action,thriller\"}, {\"Name\": \"gender\", \"StringValue\": \"female\"},{\"Name\": \"ages\", \"Field\": \"AgeLimitSv\", \"Option\": \"last\"}] Output parameters Parameter Type Description Shuffled bool shuffle recommendations StrictAfterFieldLimitCheck bool Return error if we can not find Limit valid items after FieldLimits BestEffort bool Return all valid items even if it is less than Limit Format string Response format/encoding, available options: json , og Columns array of strings Meta data columns to include in the response Limit integer Maximum number of items returned, default=0 Offset integer Items to skip cURL example curl -X POST ${IB_API_URL}/api/v1/data-models/<id>/recommendations/user-to-items \\ -H \"Authorization: ${IB_API_KEY}\" \\ -d '{\"User\": \"123\", \"Limit\": 10, \"Recurring\": false}' Response The response contains the top recommended items ordered according to the relevance score. The item object contains Id and all meta-data fields that is specified in the data-model configuration. [ {\"Id\":\"7942856970334767135\", ...}, {\"Id\":\"9136495236170061780\", ...}, ... ]","title":"Recommendations API"},{"location":"Platform/Menu/Documentation/Recommendations/#recommendations-api-documentation","text":"","title":"Recommendations - API Documentation"},{"location":"Platform/Menu/Documentation/Recommendations/#authorization","text":"Requests are authenticated and authorized with API Keys. API keys can be managed from the application menu Account / Api keys . When sending a request, the API key is provided using the Authorization header.","title":"Authorization"},{"location":"Platform/Menu/Documentation/Recommendations/#recommendations","text":"Item recommendations from a data model are provided by the API in two ways, given a user (/user-to-items) or from a list of items (/items-to-items).","title":"Recommendations"},{"location":"Platform/Menu/Documentation/Recommendations/#user-recommendations-user-to-items","text":"User-to-items recommendations can be used to generate content for user landing pages, email marketing and similar. Given a user id, a list of recommended items is returned. POST /api/v1/data-models/<id>/recommendations/user-to-items Request parameters (JSON body)","title":"User recommendations (user-to-items)"},{"location":"Platform/Menu/Documentation/Recommendations/#input-parameters","text":"Parameter Type Description User string User id to fetch item recommendations for Items array of strings Item IDs to build the recommendations from MinInteractionTs int Min timestamp for interactions to base the recommendations on MaxInteractions int Pick orders until MaxInteractions interactions are included MaxOrders int Pick orders until MaxOrders orders are included InteractionFilter SQL To select from history based on SQL query Persona Object {\"gender\": \"Female\", \"country_code\": \"SE\"}","title":"Input parameters"},{"location":"Platform/Menu/Documentation/Recommendations/#logical-parameters","text":"Parameter Type Description TrendFactor float Value between 0 and 1. 0 is used to base recommendations on similarity only, and 1 weights the recommendations on the current trend/popularity. Default is 1. Recurring boolean Allow recommending items already consumed by the user. Default is false. AllowedItems array of item ids Only items in AllowedItems is returned in the response ForcedItems array of item ids All items in ForcedItems is returned in the response BlockedItems array of item ids No items in the BlockedItems is returned in the response Candidates int number of items to consider. Default to all available items. Can be used for faster calculations. ItemFilterExpression SQL \"price>100\" ItemBoostExpression SQL \"toFloat(margin)\" Search string Experimental Full-text-search. Filter and boost based on search string. FieldLimits array of objects Ex: [{\"Field\":\"name\", \"Limit\": 2}] makes sure to not return more than 2 items of the same color. Context See example [{\"Name\":\"ageLimit\", \"FloatValue\":11},{\"Name\": \"genres\", \"ArrayValues\": \"action,thriller\"}, {\"Name\": \"gender\", \"StringValue\": \"female\"},{\"Name\": \"ages\", \"Field\": \"AgeLimitSv\", \"Option\": \"last\"}]","title":"Logical parameters"},{"location":"Platform/Menu/Documentation/Recommendations/#output-parameters","text":"Parameter Type Description Shuffled bool shuffle recommendations StrictAfterFieldLimitCheck bool Return error if we can not find Limit valid items after FieldLimits BestEffort bool Return all valid items even if it is less than Limit Format string Response format/encoding, available options: json , og Columns array of strings Meta data columns to include in the response Limit integer Maximum number of items returned, default=0 Offset integer Items to skip cURL example curl -X POST ${IB_API_URL}/api/v1/data-models/<id>/recommendations/user-to-items \\ -H \"Authorization: ${IB_API_KEY}\" \\ -d '{\"User\": \"123\", \"Limit\": 10, \"Recurring\": false}' Response The response contains the top recommended items ordered according to the relevance score. The item object contains Id and all meta-data fields that is specified in the data-model configuration. [ {\"Id\":\"7942856970334767135\", ...}, {\"Id\":\"9136495236170061780\", ...}, ... ]","title":"Output parameters"},{"location":"Platform/Menu/Manage%20Data/Data-Models/","text":"What is a datamodel? A datamodel is made up of of 3 tables (from the sources): Interaction table User table Item table Each line in the interaction table is linked to a user and an item in the item and user table. When we have chosen what sources should be our interaction, item and user tables we can create a datamodel. After this we can start creating additional information through expressions. These can later be used in dashboards (dashboards are based upon a datamodel). classDiagram `Interaction table` --> Datamodel `Item table` --> Datamodel `User table` --> Datamodel Datamodel: Fields Datamodel: Expressions Datamodel --> Dashboards Datamodel --> Segmentations Datamodel --> Recommendations When a datamodel is used for email analysis, the interaction becomes a specific email sent to a user , the user becomes the one receiving the email , and the email that was sent is treated as an item. Edit a data model To edit and see the detailed info about a data model, you need to edit it. You can edit it by clicking the \"pen\" either after clicking the data model, or in the data-models list, see images below. Interaction config The interaction table specifies info about the interaction (a user interacting with an item) that includes a timestamp (ts). An interaction config can look something like below: Fields field This is the name of the given in the source query (it can not be changed in the data model). alias By adding an alias the the field name is replaced by the alias name in the dashboard and segmentation. In Recommendation the field name is allways shown even if an alias is added. role Categories Categories is used when data is made up of multiple category 's. The data format for categories has to be [ category1 ; category2 ; category3 ; etc ] Revenue Revenue can only be set on 1 field and should be sales price (EX VAT) . The reason you set mark your sales price (EX VAT) with the revenue role is to generate suggested revenue related expressions. Quantity If a user buys multiple items of the same SKU at the same time this will be either represented as 1 interaction row with quantity x In this case that field should be set to Quantity . for some data souces this will be represented as x interaction rows without a quantity row. Timestamp The timestamp role should only be set to the field that represent the interaction timestamp (when the interaction took place). other timestamps such as return date etc. should instead be set to number. The timestamp role is needed to create suggested expressions. User The User role is set to the key-field that connects the interaction table to the user table. Item The Item role is set to the key-field that connects the interaction table to the Item table. Number The Number role is automatically set to all fields that only contains numbers (you can make toFloat( field ) without error). The number role lets you interact with a field as a number meaning you can make an calculation expressions such as if( field > 100). If you want to make a histogram you can only use fields with role Number because you specify the bin width wich can only be done if the field is concidered a Number (does not work if the field is a Category ). Category All fields that can not be classified as a Number are classified as a Category . Category 's are used in for example Bar charts . Enum EnumCategories Active The Active toggle button lets you activate/deactivate a field. a deactivated field can not be used in dashboards. Info Click here to see some data from the table. Interaction Expressions Item config The item table specifies info about the items, i.e. the products. Fields Name Description field same as in Interaction alias same as in Interaction field same as in Interaction alias same as in Interaction role Categories same as in Interaction Timestamp The timestamp lets you work with unixtimestamp and shows the result in as a datetime (readable format). Format The format role represent the name of the item and is what is shown in the Image grid in the dashboards and in the Recommendations Image The image role represent what field will be shown as a image in the Image grid in the dashboards and in the Recommendations . The image field is usually called something with url . Number same as in Interaction Category same as in Interaction Enum EnumCategories MLMeta The MLMeta toggle button controles what is returned when when you make an API call. This is to give you control what data you want to return to the customer. you dont want to activate MLMeta on all fields because this will result in you return alot of \"trash columns\" to the customer that they have to filter in turn get the relevant data. [Note that you also have to select the role Image and Format for the product to show] (MLMeta is only relevant in the recomendations view) MLFilter The MLFilter lets you write expressions and filter your data in in the Recommendations . You should only activate MLFilter for the fields you actually want to create a filter for, the reason for this is that when you activate MLFilter for a field this will store all data in the memory and every time the API calls for a recommendation the datamodel have to itterate through all fields with MLFilter resulting in a bad performance on the customers side (when the customer want to load our recomendations on their site the load speed will depend on how many MLFilters you have activated. Active Same as in Interaction Item Expressions User config The user table specifies info about the users, i.e. the customers. Fields field same as in Interaction alias same as in Interaction role Categories same as in Interaction Timestamp same as in Items Pll Email Number same as in Interaction Category same as in Interaction Enum EnumCategories User Expressions Persona The Persona toggle button controles what columns are used in the recommendations. For example, if we activate the field gender as a Persona, the recommendation engine will base the recommendations on what gender the user has. If we active the field age it will be used as a dimension in the recommendation, and so on. Note: Use a maximum of 2 columns to define persona. Alternatively, make sure that the cardinality (number of groups) is less than 1000. (ex gender: 2 different and cities: 500 different, which means 2*500 = 1000 groups) Custom properties Great feature with good UX BUT only works for a specific preprogrammed examples (RFM, CustomerLifcycle). Expression syntax (Click house) SUM() Summarize a value, for example SUM(returned_quantity) returns the total amount of returned quantity (over chosen period of time) uniq() counts the amount of unique values, for example uniq(user) returns the amount of unique users. uniqExact() Is almost the same as uniq(), however uniq() may have a very small inaccuracy (that most often doesn't matter at all), but if it's important to have for example 100.002 (correct) instead of 100.000, use uniqExact(). The reason for this is simply that uniq() is less demanding. countIf() this counts +1 for each time an argument is correct on an interaction (row). Example : let's say there's 10 interactions (ten rows) in a table with a column that's currency. On 7 of the 10 rows the currency column consists of 'SEK', if we now use countIf(currency = 'SEK') we will get the value 7. sumIf() sumIf(Value that will be summarized when, X = N) Example : sumIf(revenue, currency = 'SEK') uniqIf() multiIf(boolean, result_1, boolean, result_2, ..., boolean, result_n, else_this) multiIf(name = 'red', colour, name = 'big', 'size', 'no data') Data model expression examples Expressions can be used to calculate certain variables, for example the amount of returned items (SUM(returned_quantity) or divide certain users into different categories, for example dividing the customer base into customers with or without > 1 purchases. Expressions are made in the edit mode of a datamodel, and later can be found and used in dashboards as parameters and metrics. When writing expressions, remember to check and/or modify so that the variables like revenue , ts (timestamp), quantity is correct according to your data. returned quantity can for example be written in different ways (example: returnedQuantity / returned_quantity ) depending on data source. returnedQuantity, returned_quantity depending on the dataset. Interaction expression Days since previous order cohort multiIf (agg.daysFromPrev <=30,'1.<30', agg.daysFromPrev <=60,'2.30-60', agg.daysFromPrev <=90,'3.60-90', agg.daysFromPrev <=180,'4.90-180', agg.daysFromPrev <=360,'5.180-360', agg.daysFromPrev <=720,'6. 360-720', agg.daysFromPrev <=4000,'7.>720', '8.New') Has return multiIf(returned_quantity > 0, 'Return', 'No return') First order (month toStartOfMonth(user.agg.first) Active week toMonday(ts) Active month toStartOfMonth(ts) % discount SUM(full_price-revenue)/SUM(full_price) Revenue SUM(revenue) Price per item SUM(revenue)/SUM(quantity) Revenue per user SUM(revenue)/uniq(user) Average order value SUM(revenue)/uniq(user,ts) Sold items SUM(quantity) Items per order SUM(quantity)/uniq(user,ts) % returned quantity SUM(returned_quantity)/SUM(quantity) LTV 30d We usually do 5 different LTV metrics, just remember to change name accordingly to selected amount of days sumIf(revenue, ts < user.agg.first + 30 AND addDays(user.agg.first, 30) <= now())/uniqIf(user,addDays(user.agg.first, 30) <= now()) sumIf(revenue, ts < user.agg.first + 60 AND addDays(user.agg.first, 60) <= now())/uniqIf(user,addDays(user.agg.first, 60) <= now()) sumIf(revenue, ts < user.agg.first + 90 AND addDays(user.agg.first, 90) <= now())/uniqIf(user,addDays(user.agg.first, 90) <= now()) sumIf(revenue, ts < user.agg.first + 180 AND addDays(user.agg.first, 180) <= now())/uniqIf(user,addDays(user.agg.first, 180) <= now()) sumIf(revenue, ts < user.agg.first + 365 AND addDays(user.agg.first, 365) <= now())/uniqIf(user,addDays(user.agg.first, 365) <= now()) Returned quantity SUM(returned_quantity) Returned or not returned multiIf(returned_quantity > 0, 'Return', 'No return') Item expressions Sold items [item based dashboards] (item based dashboards here means that item is chosen as Role when creating the dashboard) SUM(article_number.agg.trans) Available quantity [item based dashboards] (item based dashboards here means that item is chosen as Role when creating the dashboard) SUM(item.in_stock) SUM(full_price-PriceExVatIncDiscSEK)/SUM(full_price) SUM(DiscountSEK) / SUM((DiscountSEK + PriceIncVatIncDiscSEK) User expressions Users > 1 order uniqIf(user,user.agg.orders>1)/uniq(user)","title":"Data Models"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#what-is-a-datamodel","text":"A datamodel is made up of of 3 tables (from the sources): Interaction table User table Item table Each line in the interaction table is linked to a user and an item in the item and user table. When we have chosen what sources should be our interaction, item and user tables we can create a datamodel. After this we can start creating additional information through expressions. These can later be used in dashboards (dashboards are based upon a datamodel). classDiagram `Interaction table` --> Datamodel `Item table` --> Datamodel `User table` --> Datamodel Datamodel: Fields Datamodel: Expressions Datamodel --> Dashboards Datamodel --> Segmentations Datamodel --> Recommendations When a datamodel is used for email analysis, the interaction becomes a specific email sent to a user , the user becomes the one receiving the email , and the email that was sent is treated as an item.","title":"What is a datamodel?"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#edit-a-data-model","text":"To edit and see the detailed info about a data model, you need to edit it. You can edit it by clicking the \"pen\" either after clicking the data model, or in the data-models list, see images below.","title":"Edit a data model"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#interaction-config","text":"The interaction table specifies info about the interaction (a user interacting with an item) that includes a timestamp (ts). An interaction config can look something like below:","title":"Interaction config"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#fields","text":"","title":"Fields"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#field","text":"This is the name of the given in the source query (it can not be changed in the data model).","title":"field"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#alias","text":"By adding an alias the the field name is replaced by the alias name in the dashboard and segmentation. In Recommendation the field name is allways shown even if an alias is added.","title":"alias"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#role","text":"Categories Categories is used when data is made up of multiple category 's. The data format for categories has to be [ category1 ; category2 ; category3 ; etc ] Revenue Revenue can only be set on 1 field and should be sales price (EX VAT) . The reason you set mark your sales price (EX VAT) with the revenue role is to generate suggested revenue related expressions. Quantity If a user buys multiple items of the same SKU at the same time this will be either represented as 1 interaction row with quantity x In this case that field should be set to Quantity . for some data souces this will be represented as x interaction rows without a quantity row. Timestamp The timestamp role should only be set to the field that represent the interaction timestamp (when the interaction took place). other timestamps such as return date etc. should instead be set to number. The timestamp role is needed to create suggested expressions. User The User role is set to the key-field that connects the interaction table to the user table. Item The Item role is set to the key-field that connects the interaction table to the Item table. Number The Number role is automatically set to all fields that only contains numbers (you can make toFloat( field ) without error). The number role lets you interact with a field as a number meaning you can make an calculation expressions such as if( field > 100). If you want to make a histogram you can only use fields with role Number because you specify the bin width wich can only be done if the field is concidered a Number (does not work if the field is a Category ). Category All fields that can not be classified as a Number are classified as a Category . Category 's are used in for example Bar charts . Enum EnumCategories","title":"role"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#active","text":"The Active toggle button lets you activate/deactivate a field. a deactivated field can not be used in dashboards.","title":"Active"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#info","text":"Click here to see some data from the table.","title":"Info"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#interaction-expressions","text":"","title":"Interaction Expressions"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#item-config","text":"The item table specifies info about the items, i.e. the products.","title":"Item config"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#fields_1","text":"Name Description field same as in Interaction alias same as in Interaction","title":"Fields"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#field_1","text":"same as in Interaction","title":"field"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#alias_1","text":"same as in Interaction","title":"alias"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#role_1","text":"Categories same as in Interaction Timestamp The timestamp lets you work with unixtimestamp and shows the result in as a datetime (readable format). Format The format role represent the name of the item and is what is shown in the Image grid in the dashboards and in the Recommendations Image The image role represent what field will be shown as a image in the Image grid in the dashboards and in the Recommendations . The image field is usually called something with url . Number same as in Interaction Category same as in Interaction Enum EnumCategories","title":"role"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#mlmeta","text":"The MLMeta toggle button controles what is returned when when you make an API call. This is to give you control what data you want to return to the customer. you dont want to activate MLMeta on all fields because this will result in you return alot of \"trash columns\" to the customer that they have to filter in turn get the relevant data. [Note that you also have to select the role Image and Format for the product to show] (MLMeta is only relevant in the recomendations view)","title":"MLMeta"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#mlfilter","text":"The MLFilter lets you write expressions and filter your data in in the Recommendations . You should only activate MLFilter for the fields you actually want to create a filter for, the reason for this is that when you activate MLFilter for a field this will store all data in the memory and every time the API calls for a recommendation the datamodel have to itterate through all fields with MLFilter resulting in a bad performance on the customers side (when the customer want to load our recomendations on their site the load speed will depend on how many MLFilters you have activated.","title":"MLFilter"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#active_1","text":"Same as in Interaction","title":"Active"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#item-expressions","text":"","title":"Item Expressions"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#user-config","text":"The user table specifies info about the users, i.e. the customers.","title":"User config"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#fields_2","text":"","title":"Fields"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#field_2","text":"same as in Interaction","title":"field"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#alias_2","text":"same as in Interaction","title":"alias"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#role_2","text":"Categories same as in Interaction Timestamp same as in Items Pll Email Number same as in Interaction Category same as in Interaction Enum EnumCategories","title":"role"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#user-expressions","text":"","title":"User Expressions"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#persona","text":"The Persona toggle button controles what columns are used in the recommendations. For example, if we activate the field gender as a Persona, the recommendation engine will base the recommendations on what gender the user has. If we active the field age it will be used as a dimension in the recommendation, and so on. Note: Use a maximum of 2 columns to define persona. Alternatively, make sure that the cardinality (number of groups) is less than 1000. (ex gender: 2 different and cities: 500 different, which means 2*500 = 1000 groups)","title":"Persona"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#custom-properties","text":"Great feature with good UX BUT only works for a specific preprogrammed examples (RFM, CustomerLifcycle).","title":"Custom properties"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#expression-syntax-click-house","text":"SUM() Summarize a value, for example SUM(returned_quantity) returns the total amount of returned quantity (over chosen period of time) uniq() counts the amount of unique values, for example uniq(user) returns the amount of unique users. uniqExact() Is almost the same as uniq(), however uniq() may have a very small inaccuracy (that most often doesn't matter at all), but if it's important to have for example 100.002 (correct) instead of 100.000, use uniqExact(). The reason for this is simply that uniq() is less demanding. countIf() this counts +1 for each time an argument is correct on an interaction (row). Example : let's say there's 10 interactions (ten rows) in a table with a column that's currency. On 7 of the 10 rows the currency column consists of 'SEK', if we now use countIf(currency = 'SEK') we will get the value 7. sumIf() sumIf(Value that will be summarized when, X = N) Example : sumIf(revenue, currency = 'SEK') uniqIf() multiIf(boolean, result_1, boolean, result_2, ..., boolean, result_n, else_this) multiIf(name = 'red', colour, name = 'big', 'size', 'no data')","title":"Expression syntax (Click house)"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#data-model-expression-examples","text":"Expressions can be used to calculate certain variables, for example the amount of returned items (SUM(returned_quantity) or divide certain users into different categories, for example dividing the customer base into customers with or without > 1 purchases. Expressions are made in the edit mode of a datamodel, and later can be found and used in dashboards as parameters and metrics. When writing expressions, remember to check and/or modify so that the variables like revenue , ts (timestamp), quantity is correct according to your data. returned quantity can for example be written in different ways (example: returnedQuantity / returned_quantity ) depending on data source. returnedQuantity, returned_quantity depending on the dataset.","title":"Data model expression examples"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#interaction-expression","text":"Days since previous order cohort multiIf (agg.daysFromPrev <=30,'1.<30', agg.daysFromPrev <=60,'2.30-60', agg.daysFromPrev <=90,'3.60-90', agg.daysFromPrev <=180,'4.90-180', agg.daysFromPrev <=360,'5.180-360', agg.daysFromPrev <=720,'6. 360-720', agg.daysFromPrev <=4000,'7.>720', '8.New') Has return multiIf(returned_quantity > 0, 'Return', 'No return') First order (month toStartOfMonth(user.agg.first) Active week toMonday(ts) Active month toStartOfMonth(ts) % discount SUM(full_price-revenue)/SUM(full_price) Revenue SUM(revenue) Price per item SUM(revenue)/SUM(quantity) Revenue per user SUM(revenue)/uniq(user) Average order value SUM(revenue)/uniq(user,ts) Sold items SUM(quantity) Items per order SUM(quantity)/uniq(user,ts) % returned quantity SUM(returned_quantity)/SUM(quantity) LTV 30d We usually do 5 different LTV metrics, just remember to change name accordingly to selected amount of days sumIf(revenue, ts < user.agg.first + 30 AND addDays(user.agg.first, 30) <= now())/uniqIf(user,addDays(user.agg.first, 30) <= now()) sumIf(revenue, ts < user.agg.first + 60 AND addDays(user.agg.first, 60) <= now())/uniqIf(user,addDays(user.agg.first, 60) <= now()) sumIf(revenue, ts < user.agg.first + 90 AND addDays(user.agg.first, 90) <= now())/uniqIf(user,addDays(user.agg.first, 90) <= now()) sumIf(revenue, ts < user.agg.first + 180 AND addDays(user.agg.first, 180) <= now())/uniqIf(user,addDays(user.agg.first, 180) <= now()) sumIf(revenue, ts < user.agg.first + 365 AND addDays(user.agg.first, 365) <= now())/uniqIf(user,addDays(user.agg.first, 365) <= now()) Returned quantity SUM(returned_quantity) Returned or not returned multiIf(returned_quantity > 0, 'Return', 'No return')","title":"Interaction expression"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#item-expressions_1","text":"Sold items [item based dashboards] (item based dashboards here means that item is chosen as Role when creating the dashboard) SUM(article_number.agg.trans) Available quantity [item based dashboards] (item based dashboards here means that item is chosen as Role when creating the dashboard) SUM(item.in_stock) SUM(full_price-PriceExVatIncDiscSEK)/SUM(full_price) SUM(DiscountSEK) / SUM((DiscountSEK + PriceIncVatIncDiscSEK)","title":"Item expressions"},{"location":"Platform/Menu/Manage%20Data/Data-Models/#user-expressions_1","text":"Users > 1 order uniqIf(user,user.agg.orders>1)/uniq(user)","title":"User expressions"},{"location":"Platform/Menu/Manage%20Data/Import-Files/","text":"Import data to the platform There are various ways to import data to the platform, here we present the most common use cases. Using a database connection (for Centra, Voyado, etc) First, make sure you know the origin files to fetch. If files are fetched from Go to the platform and then to Admin -> Configuration (can be found at the top right menu by clicking the three dots, see example image below). Set up a configuration Add a database and name the Database based on the what system they use (centra, voyado, etc), and choose the matching Driver . In the Config field, check the standard URL provided by the corresponding ecommerce platform. Notes: * A key or token is needed to access the databases. This key is listed under Admin -> Secrets . * For Centra customers there are fields that need to be specified: * \"Limit\":100000 : This is a limit so that we do not overload Centra servers when fetching data * \"Store\":1,\"Market\":3,\"PriceList\":19,\"Warehouses\":[2,3] : These are specifications to fetch the correct data, the customer seldom knows this but Centra should have the information. * For Voyado customers there are fields that need to be specified: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ * There is an option also to Add Integration . This part can be skipped, it is only used when we send data to customers. Make arbitrary query Create a source and make an arbitrary query similar to SELECT * FROM `users.gz` for Centra. You can list possible paths by using SELECT * FROM `*` . This will trigger a proxy sync, and if a Centra customer the .gz files will appear once completed. This normally takes 1-5 hours. How to verify that the sync works? Choose the source you created and press the pen to edit it. Go to the ADD QUERY tab and choose \u201cSELECT * FROM `*`\u201d . If the sync is ready, you will see a list of files to choose from, for example, users.gz , items.gz , interactions.gz , see image below. If you see the files imported you are now ready to create sources! Using a file Go to the platform and then to Manage data -> Import files (can be found at the top right menu by clicking the three dots, see example image below). If the customer sent their data in a csv-file, drag it to the drop box for importing files. Uploaded files are available from the \"imports (csv-fs)\" database connection when creating new sources (see next step). Using a feed A feed is a file that contains a list of products that often is used to advertise through Google Merchant Center. Often these feeds are updated with latest information which means Infobaleen can use the feed to add relevant product details to the platform, such as image link data. Feeds are most often published as a public URL in format .xml , see below an example: Adding a feed as a data source Get the public URL of the feed Add a new source , often it is a good idea to add a \"Merge Filter\" to avoid fetching too much data (you can for example add now() < toFloat(last_seen) + 7*24*3600 ) Add a query similar to below and also add decoder=head in the field Preprocessor directives to show the file structure. Note that you have to write url: before https:// , see example below SELECT * FROM `url:https://shop.com/plugin-export/shoppingfeed/se` [Note that you have to write url: before https://] Preprocessor directives Start by writing decoder=xml (or =feed ) to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome","title":"Import Files"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#import-data-to-the-platform","text":"There are various ways to import data to the platform, here we present the most common use cases.","title":"Import data to the platform"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#using-a-database-connection-for-centra-voyado-etc","text":"First, make sure you know the origin files to fetch. If files are fetched from Go to the platform and then to Admin -> Configuration (can be found at the top right menu by clicking the three dots, see example image below).","title":"Using a database connection (for Centra, Voyado, etc)"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#set-up-a-configuration","text":"Add a database and name the Database based on the what system they use (centra, voyado, etc), and choose the matching Driver . In the Config field, check the standard URL provided by the corresponding ecommerce platform. Notes: * A key or token is needed to access the databases. This key is listed under Admin -> Secrets . * For Centra customers there are fields that need to be specified: * \"Limit\":100000 : This is a limit so that we do not overload Centra servers when fetching data * \"Store\":1,\"Market\":3,\"PriceList\":19,\"Warehouses\":[2,3] : These are specifications to fetch the correct data, the customer seldom knows this but Centra should have the information. * For Voyado customers there are fields that need to be specified: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ * There is an option also to Add Integration . This part can be skipped, it is only used when we send data to customers.","title":"Set up a configuration"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#make-arbitrary-query","text":"Create a source and make an arbitrary query similar to SELECT * FROM `users.gz` for Centra. You can list possible paths by using SELECT * FROM `*` . This will trigger a proxy sync, and if a Centra customer the .gz files will appear once completed. This normally takes 1-5 hours.","title":"Make arbitrary query"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#how-to-verify-that-the-sync-works","text":"Choose the source you created and press the pen to edit it. Go to the ADD QUERY tab and choose \u201cSELECT * FROM `*`\u201d . If the sync is ready, you will see a list of files to choose from, for example, users.gz , items.gz , interactions.gz , see image below. If you see the files imported you are now ready to create sources!","title":"How to verify that the sync works?"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#using-a-file","text":"Go to the platform and then to Manage data -> Import files (can be found at the top right menu by clicking the three dots, see example image below). If the customer sent their data in a csv-file, drag it to the drop box for importing files. Uploaded files are available from the \"imports (csv-fs)\" database connection when creating new sources (see next step).","title":"Using a file"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#using-a-feed","text":"A feed is a file that contains a list of products that often is used to advertise through Google Merchant Center. Often these feeds are updated with latest information which means Infobaleen can use the feed to add relevant product details to the platform, such as image link data. Feeds are most often published as a public URL in format .xml , see below an example:","title":"Using a feed"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#adding-a-feed-as-a-data-source","text":"Get the public URL of the feed Add a new source , often it is a good idea to add a \"Merge Filter\" to avoid fetching too much data (you can for example add now() < toFloat(last_seen) + 7*24*3600 ) Add a query similar to below and also add decoder=head in the field Preprocessor directives to show the file structure. Note that you have to write url: before https:// , see example below SELECT * FROM `url:https://shop.com/plugin-export/shoppingfeed/se` [Note that you have to write url: before https://]","title":"Adding a feed as a data source"},{"location":"Platform/Menu/Manage%20Data/Import-Files/#preprocessor-directives","text":"Start by writing decoder=xml (or =feed ) to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome","title":"Preprocessor directives"},{"location":"Platform/Menu/Manage%20Data/Results/","text":"Results Here the results from auto-targeting and clustering are listed.","title":"Results"},{"location":"Platform/Menu/Manage%20Data/Results/#results","text":"Here the results from auto-targeting and clustering are listed.","title":"Results"},{"location":"Platform/Menu/Manage%20Data/Sources/","text":"Create sources When the data is imported , go to Manage Data -> Sources and create a new source by clicking the purple plus sign as seen in the below image. Name the source import_[source of data]_[type of data] where [source of data] specifies where the data comes from (centra, voyado, etc), and the [type of data] specifies the data type (items, users, interactions, etc). Choose an identifier for the source using the Id columns field. If the source you\u2019re creating is for: interactions : we want to identify each interaction through a user, an item and the time of the purchase, therefore choose user,ts,item under id columns and then press create. items : we want to identify each item by using an item id (often sku or variant). users : we want to identify each user by using a user id. The fields Comment and Merge Filter can be left empty, and you can press CREATE . Choose database connection and create a QUERY If it\u2019s a centra/voyado customer choose that option, if the files were uploaded manually, choose imports. You can now see the query stage, as standard \u201cSELECT * FROM `*`\u201d will show, if you press \u201cEXECUTE PREVIEW SUMMARY\u201d you will see all the imported files you can choose to gather data from. Copy the filename you want to use and enter that name in the query above, like SELECT * FROM [ENTER FILENAME HERE] . Copy the queries (depending on what system the customer has) from here: Centra queries Voyado queries The import file is now done, press sync and save to exit. Now repeat the \"Create source\"-step 2 but name the file model_[source of data]_[type of data] (the use same identifier as in the import file). In the Choose database connection now choose source instead, and press execute preview summary , now choose the import source file and edit the query to select from that, like \" SELECT * FROM ENTER_SOURCENAME_HERE \" and then press Save and sync . Frontpage columns Name Name of source id every source has an unique id wich is used to show dependencies between sources. Cnf Version Count Count describes how many rows the source have. There can only be 1 row for every unique key column. if there are multiple rows with the same key all but 1 is removed. Tags you can tag a source to keep track of how it is used. Drivers The drivers show whatdriver is used and also if it is active (green) or inactive (red). If a source has multiple queries there will be multiple drivers, here you can see wich source is active and wich are not. Sync You can set a daily sync for the source, for example DailyAt:6 . Dependencies Dependencies for a source show what other sources the are used to build up the source. an example for this is SELECT * FROM Source1 LEFT JOIN Source2 on Source2.id = Source1.id UNION SELECT * FROM Source3 This will show the id for source 1,2,3 in the Dependencies for the new source. Updated At Shows how long ago the source was last modified. Synced At Shows how long ago the source was last synced. Top Menu Delete Tag Select a source, click Tag and write a new tag or select an old tag. Migrate Truncate Trucate wipes the source of all data. This is usefull if you have changed key column for example because if you just sync the data the old data is not removed. [Note that some sources only read 1 week data at the time to save time, if you truc a source like this all historic data is removed wich is bad] Sync Manually syncs the source. Enable doesnt work Disable doesnt work Create Creates a new source. Source settigs Name Just a name Id columns The Id columns has to be choosen to be unique. if the id is not unique (the same id for many rows) only 1 row will be saved and all others are removed. For the interaction table the id has to contain user AND id or ts,item. The reason user has to be an id column is because when user is the first id column all interactions are sorted on user first. this lets you use expressions such as agg.i wich count number of interactions a user has made. if the interaction table is not sorted on user first the aggregation functions doesnt work. For multiple id columns they are sorted in the order they are written. User,ts,item is sorted first on user, then on ts and lastly on item. SELECT CUSTOM COLUMNS is usefull if you want other names than the predefined such as SKU. RunEvery Set a sync Comment Merge filter lets you filter out your query before you save it. A Merge filter discards everything that is not true before saving the table. For example if you add a query similar to toFloat(ts) > now()-100*24*3600 , then all timestamp (ts) data from later than 100 days will be discarded. Overview Shows what is in the source currently Query Database connection Load saved query lets you reload previously run queries Preprocessor directives when importing data from a link such as product feed you need to add preprocessor directives to know how to read the file. SELECT * FROM `url:https://files.channable.com/o2lQPJiYXk7KrY1DW2BJ3A==.xml` [Note that you have to write url: before https://] start by writing decoder=xml to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome Query expressions you need to enclose variable names that contain other characters than letters and numbers with backticks , this includes whitespace ' ', dot '.', etc... create a custom source SELECT * FROM raw: id,item 1,item1 2,item2 this returns a table. UNION A UNION merges two data sources by including all unique rows from both. When making a union the columns need to have the same name and be in the same order SELECT * FROM `table 1` UNION SELECT * FROM `table 2` if you have overlapping id rows in table 1 and table 2 the id in table 1 will be saved and table 2 will be discared. ex. to try this, create a test source select incr(1,50) AS id, 'table 1' AS item from `<RANDOM_SOURCE>` UNION select incr(1,1) AS id, 'table 2' AS item from `<RANDOM_SOURCE>` then create a new source SELECT * FROM `<TEST_SOURCE>` this will show that all overlapping ids will have item from table 1 . A UNION can also be suffixed by ALL, where UNION ALL will not discard duplicates, meaning much faster execution but leaves duplicate rows if they exist. INSERT INTO insert into lets you create multiple tables in the same query that you can use to create a UNION or LEFT JOIN. INSERT INTO <table_name> SELECT * FROM `<source_name>` ; The ; is needed to mark where the table end. When using the table you created with INSERT INTO you use the not the ex. LEFT JOIN <table_name> ON <table_name>.id = XXX.id LEFT JOIN LEFT JOIN lets you append more columns to an existing table firstSeen() firstseen( ) saves only the first encountered row for coalese toFloat() unixTimestamp() split() and slice() and slicestr() These expressions can be used to edit strings, see an example below: Insert into a SELECT * FROM `raw: a b 1 ABCDE` ; SELECT a AS a, split(b,'') AS step1, slice(split(b,''),0,3) AS step2, replace(slice(split(b,''),0,3),',','') AS step3, length(b), slicestr(b,1,2) FROM a The result will be: a step1 step2. step3 length(b) slicestr(b, 1, 2) 1 A,B,C,D,E. A,B,C ABC 5 BC Query solutions Connect historic and new data that has overlapping transactions, items and users. classDiagram email_model --* messages_transactions email_model --* messages_users email_model --* messages_campaigns create a custom user.agg. the datamodel creates aggregate functions such as user.agg.revenue. to create one yourself do the following. In the below example I create user.agg.margin similar to user.agg.revenue --aggregates margins per user same as user.agg.revenue but with margin INSERT INTO margin SELECT user AS user, concat('',SUM(margin)) AS total_margin FROM `s3 - transactions`; SELECT UI.user AS user, margin.total_margin AS total_margin, UI.other fields... FROM `user_import` AS UI LEFT JOIN margin ON margin.user = UI.user Note that you need to add concat('',) to the sum expression. this is because you cant LEFT JOIN a float. concat('',) converts it into a string. concat('',SUM(margin)) AS total_margin Standard Queries Centra Queries Procedure 1 Interactions 1 Items 2 Users 3 Procedure Setup config Make arbitrary query toward centra This will trigger proxy sync, the .gz files will appear once completed, duration 1-5h Interactions Id columns: id i import / user,id i model source SELECT `line.Id` AS id, `order.Customer.Id` AS user, unixTimestamp(`order.OrderDate`, '2006-01-02T15:04:05-0700') AS ts, concat(`line.ProductVariant.Id`,'_',`line.ProductSize.Size.Id`) AS item, toFloat(`line.LineValue.FormattedValue`)*toFloat(`order.CurrencyBaseRate`) AS revenue, round(`line.Quantity`*`order.CurrencyBaseRate`*`line.UnitOriginalPrice.FormattedValue`,2) AS full_price, `line.ProductVariant.Id` AS variant_id, `line.ProductVariant.Product.Id` AS product_id, `line.ProductVariant.VariantNumber` AS variant_number, `line.ProductSize.Id` AS product_size, `line.ProductSize.SKU` AS size_sku, `line.ProductSize.SizeNumber` AS size_number, `line.ProductSize.GTIN` AS size_gtin, `line.ProductSize.Size.Id` AS size_id, `line.ProductSize.Size.Name` AS size_name, toFloat(`line.LineValue.FormattedValue`) AS Non_converted_value, `line.UnitPrice.FormattedValue` AS Unitprice_formatted_value, `line.UnitOriginalPrice.FormattedValue` AS Unit_original_price_formatted_value, `line.Quantity` AS quantity, `line.ReturnedQuantity` AS returned_quantity, `line.CancelledQuantity` AS cancelled_quantity, `line.ProductNumber` AS product_number, `line.TypeName` AS type, round(`line.DiscountPercent`,0) AS discount_percent, `line.TaxPercent` AS tax_percent, `order.Id` AS order_id, `order.Number` AS order_number, unixTimestamp(`order.CreatedAt`, '2006-01-02T15:04:05-0700') AS order_created_at, `order.Status` AS order_status, `order.GrandTotal.FormattedValue` AS total order value inc VAT, `order.Shipments[0].CarrierInformation.ServiceName` AS carrier_service_name, `order.Shipments[0].CarrierInformation.CarrierName` AS carrier_name, `order.Market.Name` AS order_market, `order.Store.Name` AS store, `order.Country.Name` AS country, `order.PaymentMethod.Name` AS order_payment_method, `order.Totals.LineValues` AS order_totals_values, `order.Totals.Shipping` AS order_total_shipping, `order.Totals.Discounts` AS order_total_discounts, `order.Totals.Handling` AS order_totals_handling, `order.CurrencyBaseRate` AS order_currency_base_rate, `order.Discounts` AS order_discounts, `order.Discounts.Len` AS order_discounts_len, `order.DiscountsApplied.Name` AS discount_name, `order.DiscountsApplied.Method` AS order_discounts_applied_method, `order.DiscountsApplied.Value` AS order_discounts_applied_value, `order.DiscountsApplied.Discount.Codes` discount_codes, Currency AS currency, CurrencyOK AS currency_ok FROM`interactions.gz` Items Id columns : item SELECT concat(`variant.Id`,'_',`variant.productSize.Size.Id`) AS item, `prod.Name` AS prod_name, `variant.MediaURL` AS variant_media_url, `variant.Id` AS id, `variant.Name` AS variant_name, `variant.Status` AS variant_status, `variant.StockOffset` AS variant_stock_offset, `variant.InternalName` AS variant_internal_name, `variant.variantNumber` AS variant_variant_number, `variant.UnitCost.FormattedValue` AS variant_unit_cost_formatted_value, `variant.productSize.Id` AS variant_product_size_id, `variant.productSize.GTIN` AS variant_product_size_gtin, `variant.productSize.SizeNumber` AS variant_product_size_size_number, `variant.productSize.SKU` AS variant_product_size_sku, `variant.productSize.Size.Id` AS variant_product_size_size_id, `variant.productSize.Size.Name` AS variant_product_size_size_name, `prod.Id` AS prod_id, `prod.ProductNumber` AS prod_product_number, `prod.Brand.Name` AS prod_brand_name, `prod.CountryOfOrigin.Name` AS prod_country_of_origin_name, `prod.Collection.Name` AS prod_collection_name, `prod.Status` AS prod_status, `prod.HarmonizedCommodityCode` AS prod_harmonized_commodity_code, `prod.Folder.Name` AS prod_folder_name, `display.Store.Name` AS display_store_name, `display.Status` AS display_status, `display.Name` AS display_name, `display.DisplayItem.Id` AS display_display_item_id, `display.Categories` AS display_categories, `display.Category1` AS display_category_1, `display.Category2` AS display_category_2, `display.Category3` AS display_category_3, `display.CategoryUri` AS display_category_uri, `display.Uri` AS display_uri, `variant.productSize.Size.AvailableNowQuantity` AS variant_product_size_size_available_now_quantity, `variant.Price` AS variant_price, `variant.Currency` AS variant_currency, `variant.Campaign_DiscountPercent` AS variant_campaign_discount_percent, `variant.Campaign_FixedPrice` AS variant_campaign_fixed_price, `variant.Campaign_FixedPrice_Currency` AS variant_campaign_fixed_price_currency, market AS market, concat(`prod.Brand.Name`, ', ', `prod.Name`, if(`variant.Name` != '' OR `variant.productSize.Size.Name` != '', ' ', ''), if(`variant.Name` != '', concat('[',`variant.Name`, ']'),''), if(`variant.productSize.Size.Name` != '', concat('[',`variant.productSize.Size.Name`,']'), '') ) format FROM `items.gz` Users Id columns : user SELECT `customer.Id` AS user, `customer.IsAnonymized` AS anonymized, `customer.TotalOrders` AS total_orders, unixTimestamp(`customer.CreatedAt`, '2006-01-02T15:04:05-0700') AS created_at, unixTimestamp(`customer.UpdatedAt`, '2006-01-02T15:04:05-0700') AS updated_at, `customer.Store.Name` AS store, `customer.Email` AS email, `customer.CellPhoneNumber` AS phone FROM `users.gz` No size model for Item source called \u2018no size model - items\u2019 SELECT variantId AS id, groupcoalesce(format) AS format, groupcoalesce(productName) AS product_name, groupcoalesce(variantName) AS variant_name, groupcoalesce(variantStatus) AS variant_status, groupcoalesce(brand) AS brand, groupcoalesce(`prod.Folder.Name`) AS prod_folder_name, groupcoalesce(collection) AS collection, groupcoalesce(productNumber) AS product_number, groupcoalesce(price) AS price, groupcoalesce(availableNowQuantity) AS available_now_quantity, groupcoalesce(countryOfOrigin) AS country_of_origin, groupcoalesce(mediaURL) AS media_url, groupcoalesce(unitCost) AS unit_cost, groupcoalesce(productStatus) AS product_status, groupcoalesce(variantInternalName) AS variant_internal_name, groupcoalesce(displayCategory1) AS display_category_1, groupcoalesce(displayCategory2) AS display_category_2, groupcoalesce(displayCategory3) AS display_category_3, groupcoalesce(displayItemId) AS display_item_id FROM `centra_products_import` GROUP BY variantId Example rows with explanation Coalesce ( display.Name , prod.Name , variant.Id ) AS format Explanation: Choose display.Name if it exists, otherwise check prod.Name, and lastly variant.Id. Concat ( line.ProductVariant.Id ,' ', line.ProductSize.Size.Id ) AS item Explanation: This will merge the two lines, for example Concat (Hello, ' ', you) would concat to Hello_you unixTimestamp ( order.CreatedAt , '2006-01-02T15:04:05-0700') AS order_created_at, Explanation: This will convert a date into number form Voyado Queries Procedure 1 Items 2 Users 3 Interactions 4 Procedure Setup config Interactions SELECT * FROM `items.gz` Items SELECT * FROM `items.gz` Users SELECT * FROM `items.gz` Google Feed Query Procedure Get the link to the customer's Google feed (link to a .xml file), this is something most customers can easily supply upon request. Usually, there are multiple feeds to cover all different markets. The link to a specific market is a URL like https://some.domain/api/feed/google_se/SOMEKEY Import Query SELECT * FROM `url:GOOGLE_FEED_LINK` Preprocess Directives In the Preprocessor Directives field, set the xml properties as follows. There may be other useful field to include in the pluck line as well. decoder=xml root=rss.channel rowTag=item pluck=id,title,image_link,availability,price,sale_price,google_product_category,product_type,brand Note: Stray Ampersands are currently not accepted, but Google handles these. If you get errors with this, you can read feeds with non-escaped ampersands using this as the first line in the preprocessor: preprocess=[[\"replace\",\"&\",\"\"]]","title":"Sources"},{"location":"Platform/Menu/Manage%20Data/Sources/#create-sources","text":"When the data is imported , go to Manage Data -> Sources and create a new source by clicking the purple plus sign as seen in the below image. Name the source import_[source of data]_[type of data] where [source of data] specifies where the data comes from (centra, voyado, etc), and the [type of data] specifies the data type (items, users, interactions, etc). Choose an identifier for the source using the Id columns field. If the source you\u2019re creating is for: interactions : we want to identify each interaction through a user, an item and the time of the purchase, therefore choose user,ts,item under id columns and then press create. items : we want to identify each item by using an item id (often sku or variant). users : we want to identify each user by using a user id. The fields Comment and Merge Filter can be left empty, and you can press CREATE . Choose database connection and create a QUERY If it\u2019s a centra/voyado customer choose that option, if the files were uploaded manually, choose imports. You can now see the query stage, as standard \u201cSELECT * FROM `*`\u201d will show, if you press \u201cEXECUTE PREVIEW SUMMARY\u201d you will see all the imported files you can choose to gather data from. Copy the filename you want to use and enter that name in the query above, like SELECT * FROM [ENTER FILENAME HERE] . Copy the queries (depending on what system the customer has) from here: Centra queries Voyado queries The import file is now done, press sync and save to exit. Now repeat the \"Create source\"-step 2 but name the file model_[source of data]_[type of data] (the use same identifier as in the import file). In the Choose database connection now choose source instead, and press execute preview summary , now choose the import source file and edit the query to select from that, like \" SELECT * FROM ENTER_SOURCENAME_HERE \" and then press Save and sync .","title":"Create sources"},{"location":"Platform/Menu/Manage%20Data/Sources/#frontpage-columns","text":"","title":"Frontpage columns"},{"location":"Platform/Menu/Manage%20Data/Sources/#name","text":"Name of source","title":"Name"},{"location":"Platform/Menu/Manage%20Data/Sources/#id","text":"every source has an unique id wich is used to show dependencies between sources.","title":"id"},{"location":"Platform/Menu/Manage%20Data/Sources/#cnf-version","text":"","title":"Cnf Version"},{"location":"Platform/Menu/Manage%20Data/Sources/#count","text":"Count describes how many rows the source have. There can only be 1 row for every unique key column. if there are multiple rows with the same key all but 1 is removed.","title":"Count"},{"location":"Platform/Menu/Manage%20Data/Sources/#tags","text":"you can tag a source to keep track of how it is used.","title":"Tags"},{"location":"Platform/Menu/Manage%20Data/Sources/#drivers","text":"The drivers show whatdriver is used and also if it is active (green) or inactive (red). If a source has multiple queries there will be multiple drivers, here you can see wich source is active and wich are not.","title":"Drivers"},{"location":"Platform/Menu/Manage%20Data/Sources/#sync","text":"You can set a daily sync for the source, for example DailyAt:6 .","title":"Sync"},{"location":"Platform/Menu/Manage%20Data/Sources/#dependencies","text":"Dependencies for a source show what other sources the are used to build up the source. an example for this is SELECT * FROM Source1 LEFT JOIN Source2 on Source2.id = Source1.id UNION SELECT * FROM Source3 This will show the id for source 1,2,3 in the Dependencies for the new source.","title":"Dependencies"},{"location":"Platform/Menu/Manage%20Data/Sources/#updated-at","text":"Shows how long ago the source was last modified.","title":"Updated At"},{"location":"Platform/Menu/Manage%20Data/Sources/#synced-at","text":"Shows how long ago the source was last synced.","title":"Synced At"},{"location":"Platform/Menu/Manage%20Data/Sources/#top-menu","text":"","title":"Top Menu"},{"location":"Platform/Menu/Manage%20Data/Sources/#delete","text":"","title":"Delete"},{"location":"Platform/Menu/Manage%20Data/Sources/#tag","text":"Select a source, click Tag and write a new tag or select an old tag.","title":"Tag"},{"location":"Platform/Menu/Manage%20Data/Sources/#migrate","text":"","title":"Migrate"},{"location":"Platform/Menu/Manage%20Data/Sources/#truncate","text":"Trucate wipes the source of all data. This is usefull if you have changed key column for example because if you just sync the data the old data is not removed. [Note that some sources only read 1 week data at the time to save time, if you truc a source like this all historic data is removed wich is bad]","title":"Truncate"},{"location":"Platform/Menu/Manage%20Data/Sources/#sync_1","text":"Manually syncs the source.","title":"Sync"},{"location":"Platform/Menu/Manage%20Data/Sources/#enable","text":"doesnt work","title":"Enable"},{"location":"Platform/Menu/Manage%20Data/Sources/#disable","text":"doesnt work","title":"Disable"},{"location":"Platform/Menu/Manage%20Data/Sources/#create","text":"Creates a new source.","title":"Create"},{"location":"Platform/Menu/Manage%20Data/Sources/#source-settigs","text":"","title":"Source settigs"},{"location":"Platform/Menu/Manage%20Data/Sources/#name_1","text":"Just a name","title":"Name"},{"location":"Platform/Menu/Manage%20Data/Sources/#id-columns","text":"The Id columns has to be choosen to be unique. if the id is not unique (the same id for many rows) only 1 row will be saved and all others are removed. For the interaction table the id has to contain user AND id or ts,item. The reason user has to be an id column is because when user is the first id column all interactions are sorted on user first. this lets you use expressions such as agg.i wich count number of interactions a user has made. if the interaction table is not sorted on user first the aggregation functions doesnt work. For multiple id columns they are sorted in the order they are written. User,ts,item is sorted first on user, then on ts and lastly on item. SELECT CUSTOM COLUMNS is usefull if you want other names than the predefined such as SKU.","title":"Id columns"},{"location":"Platform/Menu/Manage%20Data/Sources/#runevery","text":"Set a sync","title":"RunEvery"},{"location":"Platform/Menu/Manage%20Data/Sources/#comment","text":"","title":"Comment"},{"location":"Platform/Menu/Manage%20Data/Sources/#merge-filter","text":"lets you filter out your query before you save it. A Merge filter discards everything that is not true before saving the table. For example if you add a query similar to toFloat(ts) > now()-100*24*3600 , then all timestamp (ts) data from later than 100 days will be discarded.","title":"Merge filter"},{"location":"Platform/Menu/Manage%20Data/Sources/#overview","text":"Shows what is in the source currently","title":"Overview"},{"location":"Platform/Menu/Manage%20Data/Sources/#query","text":"","title":"Query"},{"location":"Platform/Menu/Manage%20Data/Sources/#database-connection","text":"","title":"Database connection"},{"location":"Platform/Menu/Manage%20Data/Sources/#load-saved-query","text":"lets you reload previously run queries","title":"Load saved query"},{"location":"Platform/Menu/Manage%20Data/Sources/#preprocessor-directives","text":"when importing data from a link such as product feed you need to add preprocessor directives to know how to read the file. SELECT * FROM `url:https://files.channable.com/o2lQPJiYXk7KrY1DW2BJ3A==.xml` [Note that you have to write url: before https://] start by writing decoder=xml to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome","title":"Preprocessor directives"},{"location":"Platform/Menu/Manage%20Data/Sources/#query-expressions","text":"you need to enclose variable names that contain other characters than letters and numbers with backticks , this includes whitespace ' ', dot '.', etc...","title":"Query expressions"},{"location":"Platform/Menu/Manage%20Data/Sources/#create-a-custom-source","text":"SELECT * FROM raw: id,item 1,item1 2,item2 this returns a table.","title":"create a custom source"},{"location":"Platform/Menu/Manage%20Data/Sources/#union","text":"A UNION merges two data sources by including all unique rows from both. When making a union the columns need to have the same name and be in the same order SELECT * FROM `table 1` UNION SELECT * FROM `table 2` if you have overlapping id rows in table 1 and table 2 the id in table 1 will be saved and table 2 will be discared. ex. to try this, create a test source select incr(1,50) AS id, 'table 1' AS item from `<RANDOM_SOURCE>` UNION select incr(1,1) AS id, 'table 2' AS item from `<RANDOM_SOURCE>` then create a new source SELECT * FROM `<TEST_SOURCE>` this will show that all overlapping ids will have item from table 1 . A UNION can also be suffixed by ALL, where UNION ALL will not discard duplicates, meaning much faster execution but leaves duplicate rows if they exist.","title":"UNION"},{"location":"Platform/Menu/Manage%20Data/Sources/#insert-into","text":"insert into lets you create multiple tables in the same query that you can use to create a UNION or LEFT JOIN. INSERT INTO <table_name> SELECT * FROM `<source_name>` ; The ; is needed to mark where the table end. When using the table you created with INSERT INTO you use the not the ex. LEFT JOIN <table_name> ON <table_name>.id = XXX.id","title":"INSERT INTO"},{"location":"Platform/Menu/Manage%20Data/Sources/#left-join","text":"LEFT JOIN lets you append more columns to an existing table","title":"LEFT JOIN"},{"location":"Platform/Menu/Manage%20Data/Sources/#firstseen","text":"firstseen( ) saves only the first encountered row for coalese toFloat() unixTimestamp()","title":"firstSeen()"},{"location":"Platform/Menu/Manage%20Data/Sources/#split-and-slice-and-slicestr","text":"These expressions can be used to edit strings, see an example below: Insert into a SELECT * FROM `raw: a b 1 ABCDE` ; SELECT a AS a, split(b,'') AS step1, slice(split(b,''),0,3) AS step2, replace(slice(split(b,''),0,3),',','') AS step3, length(b), slicestr(b,1,2) FROM a The result will be: a step1 step2. step3 length(b) slicestr(b, 1, 2) 1 A,B,C,D,E. A,B,C ABC 5 BC","title":"split() and slice() and slicestr()"},{"location":"Platform/Menu/Manage%20Data/Sources/#query-solutions","text":"","title":"Query solutions"},{"location":"Platform/Menu/Manage%20Data/Sources/#connect-historic-and-new-data-that-has-overlapping-transactions-items-and-users","text":"classDiagram email_model --* messages_transactions email_model --* messages_users email_model --* messages_campaigns","title":"Connect historic and new data that has overlapping transactions, items and users."},{"location":"Platform/Menu/Manage%20Data/Sources/#create-a-custom-useragg","text":"the datamodel creates aggregate functions such as user.agg.revenue. to create one yourself do the following. In the below example I create user.agg.margin similar to user.agg.revenue --aggregates margins per user same as user.agg.revenue but with margin INSERT INTO margin SELECT user AS user, concat('',SUM(margin)) AS total_margin FROM `s3 - transactions`; SELECT UI.user AS user, margin.total_margin AS total_margin, UI.other fields... FROM `user_import` AS UI LEFT JOIN margin ON margin.user = UI.user Note that you need to add concat('',) to the sum expression. this is because you cant LEFT JOIN a float. concat('',) converts it into a string. concat('',SUM(margin)) AS total_margin","title":"create a custom user.agg."},{"location":"Platform/Menu/Manage%20Data/Sources/#standard-queries","text":"","title":"Standard Queries"},{"location":"Platform/Menu/Manage%20Data/Sources/#centra-queries","text":"Procedure 1 Interactions 1 Items 2 Users 3","title":"Centra Queries"},{"location":"Platform/Menu/Manage%20Data/Sources/#procedure","text":"Setup config Make arbitrary query toward centra This will trigger proxy sync, the .gz files will appear once completed, duration 1-5h","title":"Procedure"},{"location":"Platform/Menu/Manage%20Data/Sources/#interactions","text":"Id columns: id i import / user,id i model source SELECT `line.Id` AS id, `order.Customer.Id` AS user, unixTimestamp(`order.OrderDate`, '2006-01-02T15:04:05-0700') AS ts, concat(`line.ProductVariant.Id`,'_',`line.ProductSize.Size.Id`) AS item, toFloat(`line.LineValue.FormattedValue`)*toFloat(`order.CurrencyBaseRate`) AS revenue, round(`line.Quantity`*`order.CurrencyBaseRate`*`line.UnitOriginalPrice.FormattedValue`,2) AS full_price, `line.ProductVariant.Id` AS variant_id, `line.ProductVariant.Product.Id` AS product_id, `line.ProductVariant.VariantNumber` AS variant_number, `line.ProductSize.Id` AS product_size, `line.ProductSize.SKU` AS size_sku, `line.ProductSize.SizeNumber` AS size_number, `line.ProductSize.GTIN` AS size_gtin, `line.ProductSize.Size.Id` AS size_id, `line.ProductSize.Size.Name` AS size_name, toFloat(`line.LineValue.FormattedValue`) AS Non_converted_value, `line.UnitPrice.FormattedValue` AS Unitprice_formatted_value, `line.UnitOriginalPrice.FormattedValue` AS Unit_original_price_formatted_value, `line.Quantity` AS quantity, `line.ReturnedQuantity` AS returned_quantity, `line.CancelledQuantity` AS cancelled_quantity, `line.ProductNumber` AS product_number, `line.TypeName` AS type, round(`line.DiscountPercent`,0) AS discount_percent, `line.TaxPercent` AS tax_percent, `order.Id` AS order_id, `order.Number` AS order_number, unixTimestamp(`order.CreatedAt`, '2006-01-02T15:04:05-0700') AS order_created_at, `order.Status` AS order_status, `order.GrandTotal.FormattedValue` AS total order value inc VAT, `order.Shipments[0].CarrierInformation.ServiceName` AS carrier_service_name, `order.Shipments[0].CarrierInformation.CarrierName` AS carrier_name, `order.Market.Name` AS order_market, `order.Store.Name` AS store, `order.Country.Name` AS country, `order.PaymentMethod.Name` AS order_payment_method, `order.Totals.LineValues` AS order_totals_values, `order.Totals.Shipping` AS order_total_shipping, `order.Totals.Discounts` AS order_total_discounts, `order.Totals.Handling` AS order_totals_handling, `order.CurrencyBaseRate` AS order_currency_base_rate, `order.Discounts` AS order_discounts, `order.Discounts.Len` AS order_discounts_len, `order.DiscountsApplied.Name` AS discount_name, `order.DiscountsApplied.Method` AS order_discounts_applied_method, `order.DiscountsApplied.Value` AS order_discounts_applied_value, `order.DiscountsApplied.Discount.Codes` discount_codes, Currency AS currency, CurrencyOK AS currency_ok FROM`interactions.gz`","title":"Interactions"},{"location":"Platform/Menu/Manage%20Data/Sources/#items","text":"Id columns : item SELECT concat(`variant.Id`,'_',`variant.productSize.Size.Id`) AS item, `prod.Name` AS prod_name, `variant.MediaURL` AS variant_media_url, `variant.Id` AS id, `variant.Name` AS variant_name, `variant.Status` AS variant_status, `variant.StockOffset` AS variant_stock_offset, `variant.InternalName` AS variant_internal_name, `variant.variantNumber` AS variant_variant_number, `variant.UnitCost.FormattedValue` AS variant_unit_cost_formatted_value, `variant.productSize.Id` AS variant_product_size_id, `variant.productSize.GTIN` AS variant_product_size_gtin, `variant.productSize.SizeNumber` AS variant_product_size_size_number, `variant.productSize.SKU` AS variant_product_size_sku, `variant.productSize.Size.Id` AS variant_product_size_size_id, `variant.productSize.Size.Name` AS variant_product_size_size_name, `prod.Id` AS prod_id, `prod.ProductNumber` AS prod_product_number, `prod.Brand.Name` AS prod_brand_name, `prod.CountryOfOrigin.Name` AS prod_country_of_origin_name, `prod.Collection.Name` AS prod_collection_name, `prod.Status` AS prod_status, `prod.HarmonizedCommodityCode` AS prod_harmonized_commodity_code, `prod.Folder.Name` AS prod_folder_name, `display.Store.Name` AS display_store_name, `display.Status` AS display_status, `display.Name` AS display_name, `display.DisplayItem.Id` AS display_display_item_id, `display.Categories` AS display_categories, `display.Category1` AS display_category_1, `display.Category2` AS display_category_2, `display.Category3` AS display_category_3, `display.CategoryUri` AS display_category_uri, `display.Uri` AS display_uri, `variant.productSize.Size.AvailableNowQuantity` AS variant_product_size_size_available_now_quantity, `variant.Price` AS variant_price, `variant.Currency` AS variant_currency, `variant.Campaign_DiscountPercent` AS variant_campaign_discount_percent, `variant.Campaign_FixedPrice` AS variant_campaign_fixed_price, `variant.Campaign_FixedPrice_Currency` AS variant_campaign_fixed_price_currency, market AS market, concat(`prod.Brand.Name`, ', ', `prod.Name`, if(`variant.Name` != '' OR `variant.productSize.Size.Name` != '', ' ', ''), if(`variant.Name` != '', concat('[',`variant.Name`, ']'),''), if(`variant.productSize.Size.Name` != '', concat('[',`variant.productSize.Size.Name`,']'), '') ) format FROM `items.gz`","title":"Items"},{"location":"Platform/Menu/Manage%20Data/Sources/#users","text":"Id columns : user SELECT `customer.Id` AS user, `customer.IsAnonymized` AS anonymized, `customer.TotalOrders` AS total_orders, unixTimestamp(`customer.CreatedAt`, '2006-01-02T15:04:05-0700') AS created_at, unixTimestamp(`customer.UpdatedAt`, '2006-01-02T15:04:05-0700') AS updated_at, `customer.Store.Name` AS store, `customer.Email` AS email, `customer.CellPhoneNumber` AS phone FROM `users.gz`","title":"Users"},{"location":"Platform/Menu/Manage%20Data/Sources/#no-size-model","text":"for Item source called \u2018no size model - items\u2019 SELECT variantId AS id, groupcoalesce(format) AS format, groupcoalesce(productName) AS product_name, groupcoalesce(variantName) AS variant_name, groupcoalesce(variantStatus) AS variant_status, groupcoalesce(brand) AS brand, groupcoalesce(`prod.Folder.Name`) AS prod_folder_name, groupcoalesce(collection) AS collection, groupcoalesce(productNumber) AS product_number, groupcoalesce(price) AS price, groupcoalesce(availableNowQuantity) AS available_now_quantity, groupcoalesce(countryOfOrigin) AS country_of_origin, groupcoalesce(mediaURL) AS media_url, groupcoalesce(unitCost) AS unit_cost, groupcoalesce(productStatus) AS product_status, groupcoalesce(variantInternalName) AS variant_internal_name, groupcoalesce(displayCategory1) AS display_category_1, groupcoalesce(displayCategory2) AS display_category_2, groupcoalesce(displayCategory3) AS display_category_3, groupcoalesce(displayItemId) AS display_item_id FROM `centra_products_import` GROUP BY variantId","title":"No size model"},{"location":"Platform/Menu/Manage%20Data/Sources/#example-rows-with-explanation","text":"Coalesce ( display.Name , prod.Name , variant.Id ) AS format Explanation: Choose display.Name if it exists, otherwise check prod.Name, and lastly variant.Id. Concat ( line.ProductVariant.Id ,' ', line.ProductSize.Size.Id ) AS item Explanation: This will merge the two lines, for example Concat (Hello, ' ', you) would concat to Hello_you unixTimestamp ( order.CreatedAt , '2006-01-02T15:04:05-0700') AS order_created_at, Explanation: This will convert a date into number form","title":"Example rows with explanation"},{"location":"Platform/Menu/Manage%20Data/Sources/#voyado-queries","text":"Procedure 1 Items 2 Users 3 Interactions 4","title":"Voyado Queries"},{"location":"Platform/Menu/Manage%20Data/Sources/#procedure_1","text":"Setup config","title":"Procedure"},{"location":"Platform/Menu/Manage%20Data/Sources/#interactions_1","text":"SELECT * FROM `items.gz`","title":"Interactions"},{"location":"Platform/Menu/Manage%20Data/Sources/#items_1","text":"SELECT * FROM `items.gz`","title":"Items"},{"location":"Platform/Menu/Manage%20Data/Sources/#users_1","text":"SELECT * FROM `items.gz`","title":"Users"},{"location":"Platform/Menu/Manage%20Data/Sources/#google-feed-query","text":"","title":"Google Feed Query"},{"location":"Platform/Menu/Manage%20Data/Sources/#procedure_2","text":"Get the link to the customer's Google feed (link to a .xml file), this is something most customers can easily supply upon request. Usually, there are multiple feeds to cover all different markets. The link to a specific market is a URL like https://some.domain/api/feed/google_se/SOMEKEY","title":"Procedure"},{"location":"Platform/Menu/Manage%20Data/Sources/#import-query","text":"SELECT * FROM `url:GOOGLE_FEED_LINK`","title":"Import Query"},{"location":"Platform/Menu/Manage%20Data/Sources/#preprocess-directives","text":"In the Preprocessor Directives field, set the xml properties as follows. There may be other useful field to include in the pluck line as well. decoder=xml root=rss.channel rowTag=item pluck=id,title,image_link,availability,price,sale_price,google_product_category,product_type,brand Note: Stray Ampersands are currently not accepted, but Google handles these. If you get errors with this, you can read feeds with non-escaped ampersands using this as the first line in the preprocessor: preprocess=[[\"replace\",\"&\",\"\"]]","title":"Preprocess Directives"},{"location":"Platform/Menu/Model/Interactions/","text":"Interactions","title":"Interactions"},{"location":"Platform/Menu/Model/Interactions/#interactions","text":"","title":"Interactions"},{"location":"Platform/Menu/Model/Overview/","text":"Overview","title":"Overview"},{"location":"Platform/Menu/Model/Overview/#overview","text":"","title":"Overview"},{"location":"Platform/Menu/Model/Products/","text":"Products","title":"Products"},{"location":"Platform/Menu/Model/Products/#products","text":"","title":"Products"},{"location":"Platform/Menu/Model/Users/","text":"Users","title":"Users"},{"location":"Platform/Menu/Model/Users/#users","text":"","title":"Users"},{"location":"Platform/Menu/Other/Overlaps/","text":"Overlaps","title":"Other"},{"location":"Platform/Menu/Other/Overlaps/#overlaps","text":"","title":"Overlaps"},{"location":"Platform/Recommendations/Data%20available%20in%20recommendations/","text":"Data available in recommendations MlMeta To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields. MlFilter To write filter expressions based on fields you have to activate ml filter for these fields","title":"Data available in recommendations"},{"location":"Platform/Recommendations/Data%20available%20in%20recommendations/#data-available-in-recommendations","text":"","title":"Data available in recommendations"},{"location":"Platform/Recommendations/Data%20available%20in%20recommendations/#mlmeta","text":"To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields.","title":"MlMeta"},{"location":"Platform/Recommendations/Data%20available%20in%20recommendations/#mlfilter","text":"To write filter expressions based on fields you have to activate ml filter for these fields","title":"MlFilter"},{"location":"Platform/Recommendations/Front%20page/","text":"Front page Search for items Items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup . Profile Saved profiles Refresh Clear user and items Removes selected items and user Bench Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower). Add random item Same as search for items but adds a random item. Add random user Selects a random user and shows what items this user has previously bought and the returned recommended items based on this. Recommendation output The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive:","title":"Front page"},{"location":"Platform/Recommendations/Front%20page/#front-page","text":"","title":"Front page"},{"location":"Platform/Recommendations/Front%20page/#search-for-items","text":"Items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup .","title":"Search for items"},{"location":"Platform/Recommendations/Front%20page/#profile","text":"Saved profiles","title":"Profile"},{"location":"Platform/Recommendations/Front%20page/#refresh","text":"","title":"Refresh"},{"location":"Platform/Recommendations/Front%20page/#clear-user-and-items","text":"Removes selected items and user","title":"Clear user and items"},{"location":"Platform/Recommendations/Front%20page/#bench","text":"Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower).","title":"Bench"},{"location":"Platform/Recommendations/Front%20page/#add-random-item","text":"Same as search for items but adds a random item.","title":"Add random item"},{"location":"Platform/Recommendations/Front%20page/#add-random-user","text":"Selects a random user and shows what items this user has previously bought and the returned recommended items based on this.","title":"Add random user"},{"location":"Platform/Recommendations/Front%20page/#recommendation-output","text":"The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive:","title":"Recommendation output"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/","text":"Recommendations UI You can use the platform to create personalized product recommendations that can be added to your website, checkout flow or in email campaigns. You can create customizable API recommendations profiles with filters and rules based on your product meta data, and apply them to different use cases. Below is an example how the recommendations tab can look. By clicking the cog wheel you will open the settings. Settings Here we explain the different settings fields that can be seen after clicing the cog wheel. Search Columns Columns are the data columns that can be used to create filters and rules. These are activated in the data model with the MlFilter toggle (MlFilter = Machine Learning Filter), see the image below. Filter expression Here you can write an expression that creates a filter for your recommendation profile. For example, perhaps you just want to recommend products in a specific category, then you would write something like category = 'Kaffe & Te' , or price > 100 If the expression is True the product will be included in the recommendation, and it the expression is False the product will be filtered. In the case of price > 100 , the expression will return True for all products with a price larger than 100 thus removing all items with a price lower than 100 from the recommendations. Boost expression InteractionFilter Trend Trend limits the time interval for the data that the recomendations are based on. Max trend uses a short time interval resulting in the machine-learning model only recommending products that are trending last few weeks. Limit Limit decides how many recomended items are returned. For example, Limit 4 = Four recommended items. Limit 12 = 12 recommended items. Max orders Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account. Max interactions Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account. Allow items from history Sets a filter so that all items the user have bought cannot be recommended. Shuffled If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled. Advanced Create an advanced filter. Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. See an example below: Example of advanced quey {\"Context\":[{\"Name\":\"bought_phone_model\",\"Field\":\"phone_model\",\"Option\":\"all\"}]} Filter expression: hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example: Add field limit Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category. Save as new profile Saves the current configuration as a profile new Save profile Overrides the current profile with the current configuration. Delete profile Delets selected profile. Front page Search for items Items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup . Profile Saved profiles Refresh Clear user and items Removes selected items and user Bench Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower). Add random item Same as search for items but adds a random item. Add random user Selects a random user and shows what items this user has previously bought and the returned recommended items based on this. Recommendation output The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive: Data available in recommendations MlMeta To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields. MlFilter To write filter expressions based on fields you have to activate ml filter for these fields Recommendations in emails Introduction We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user. Partners Here we specify how the process works between us and specified partners Voyado Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000,\"Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528\",9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10,\"Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515\",9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3,\"Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150\",9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history. Infobaleen recommended recommendation profiles Basic settings Products in stock For clear gender-related products: See if you should only recommend products with the same gender Olika rekommendationer Standard rekommendation: Standard Rekommendera det mest sannolika n\u00e4sta k\u00f6pet (medium trend) Syfte: H\u00f6g sannolik att konvertera Liknande produkter rekommendation: Similar Rekommendera produkter ur samma kategori Syfte: H\u00f6g igenk\u00e4nningsfaktor Inspiration rekommendation: Inspiration Rekommendera produkter inom kategorier kunden ej handlat inom tidigare / vald produkt Syfte: Inspirera till k\u00f6p i de mest relevanta kategorier man \u00e4nnu ej handlat inom / produkten ej \u00e4r i Win-back rekommendation: Win-back Rekommendera mest sannolika produkter en kund kommer k\u00f6pa utifr\u00e5n historiskt k\u00f6pbeteende Syfte: Presenter de produkter en churnad kund har h\u00f6gst sannolikhet att k\u00f6pa Check-out rekommendation: Check-out Rekommendera billigare produkter utifr\u00e5n vad kunden lagt i sin varukorg Syfte: \u00d6ka AOV med en relevant produkt i det l\u00e4gre prissegmentet Expression: tofloat(Price) < tofloat(last(basketArticlePrice))*0.8 Tack f\u00f6r senast order rekommendation: Last purchase Rekommendera mest sannolika produkter utifr\u00e5n kundens senaste order Syfte: \u00d6ka andelen kunder som g\u00f6r ett n\u00e4sta k\u00f6p Produkter p\u00e5 rea rekommendationer: On sale Rekommendera produkter som \u00e4r p\u00e5 rea Syfte: \u00d6ka rea fsg genom att visa relevanta produkter p\u00e5 rea.","title":"Infobaleen recommended recommendation profiles"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#recommendations-ui","text":"You can use the platform to create personalized product recommendations that can be added to your website, checkout flow or in email campaigns. You can create customizable API recommendations profiles with filters and rules based on your product meta data, and apply them to different use cases. Below is an example how the recommendations tab can look. By clicking the cog wheel you will open the settings.","title":"Recommendations UI"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#settings","text":"Here we explain the different settings fields that can be seen after clicing the cog wheel.","title":"Settings"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#search","text":"","title":"Search"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#columns","text":"Columns are the data columns that can be used to create filters and rules. These are activated in the data model with the MlFilter toggle (MlFilter = Machine Learning Filter), see the image below.","title":"Columns"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#filter-expression","text":"Here you can write an expression that creates a filter for your recommendation profile. For example, perhaps you just want to recommend products in a specific category, then you would write something like category = 'Kaffe & Te' , or price > 100 If the expression is True the product will be included in the recommendation, and it the expression is False the product will be filtered. In the case of price > 100 , the expression will return True for all products with a price larger than 100 thus removing all items with a price lower than 100 from the recommendations.","title":"Filter expression"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#boost-expression","text":"","title":"Boost expression"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#interactionfilter","text":"","title":"InteractionFilter"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#trend","text":"Trend limits the time interval for the data that the recomendations are based on. Max trend uses a short time interval resulting in the machine-learning model only recommending products that are trending last few weeks.","title":"Trend"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#limit","text":"Limit decides how many recomended items are returned. For example, Limit 4 = Four recommended items. Limit 12 = 12 recommended items.","title":"Limit"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#max-orders","text":"Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account.","title":"Max orders"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#max-interactions","text":"Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account.","title":"Max interactions"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#allow-items-from-history","text":"Sets a filter so that all items the user have bought cannot be recommended.","title":"Allow items from history"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#shuffled","text":"If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled.","title":"Shuffled"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#advanced","text":"Create an advanced filter. Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. See an example below:","title":"Advanced"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#example-of-advanced-quey","text":"{\"Context\":[{\"Name\":\"bought_phone_model\",\"Field\":\"phone_model\",\"Option\":\"all\"}]} Filter expression: hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example:","title":"Example of advanced quey"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#add-field-limit","text":"Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category.","title":"Add field limit"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#save-as-new-profile","text":"Saves the current configuration as a profile new","title":"Save as new profile"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#save-profile","text":"Overrides the current profile with the current configuration.","title":"Save profile"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#delete-profile","text":"Delets selected profile.","title":"Delete profile"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#front-page","text":"","title":"Front page"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#search-for-items","text":"Items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup .","title":"Search for items"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#profile","text":"Saved profiles","title":"Profile"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#refresh","text":"","title":"Refresh"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#clear-user-and-items","text":"Removes selected items and user","title":"Clear user and items"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#bench","text":"Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower).","title":"Bench"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#add-random-item","text":"Same as search for items but adds a random item.","title":"Add random item"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#add-random-user","text":"Selects a random user and shows what items this user has previously bought and the returned recommended items based on this.","title":"Add random user"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#recommendation-output","text":"The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive:","title":"Recommendation output"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#data-available-in-recommendations","text":"","title":"Data available in recommendations"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#mlmeta","text":"To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields.","title":"MlMeta"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#mlfilter","text":"To write filter expressions based on fields you have to activate ml filter for these fields","title":"MlFilter"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#recommendations-in-emails","text":"","title":"Recommendations in emails"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#introduction","text":"We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user.","title":"Introduction"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#partners","text":"Here we specify how the process works between us and specified partners","title":"Partners"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#voyado","text":"Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000,\"Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528\",9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10,\"Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515\",9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3,\"Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150\",9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history.","title":"Voyado"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#infobaleen-recommended-recommendation-profiles","text":"","title":"Infobaleen recommended recommendation profiles"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#basic-settings","text":"Products in stock For clear gender-related products: See if you should only recommend products with the same gender","title":"Basic settings"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#olika-rekommendationer","text":"","title":"Olika rekommendationer"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#standard-rekommendation-standard","text":"Rekommendera det mest sannolika n\u00e4sta k\u00f6pet (medium trend) Syfte: H\u00f6g sannolik att konvertera","title":"Standard rekommendation: Standard"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#liknande-produkter-rekommendation-similar","text":"Rekommendera produkter ur samma kategori Syfte: H\u00f6g igenk\u00e4nningsfaktor","title":"Liknande produkter rekommendation: Similar"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#inspiration-rekommendation-inspiration","text":"Rekommendera produkter inom kategorier kunden ej handlat inom tidigare / vald produkt Syfte: Inspirera till k\u00f6p i de mest relevanta kategorier man \u00e4nnu ej handlat inom / produkten ej \u00e4r i","title":"Inspiration rekommendation: Inspiration"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#win-back-rekommendation-win-back","text":"Rekommendera mest sannolika produkter en kund kommer k\u00f6pa utifr\u00e5n historiskt k\u00f6pbeteende Syfte: Presenter de produkter en churnad kund har h\u00f6gst sannolikhet att k\u00f6pa","title":"Win-back rekommendation: Win-back"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#check-out-rekommendation-check-out","text":"Rekommendera billigare produkter utifr\u00e5n vad kunden lagt i sin varukorg Syfte: \u00d6ka AOV med en relevant produkt i det l\u00e4gre prissegmentet Expression: tofloat(Price) < tofloat(last(basketArticlePrice))*0.8","title":"Check-out rekommendation: Check-out"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#tack-for-senast-order-rekommendation-last-purchase","text":"Rekommendera mest sannolika produkter utifr\u00e5n kundens senaste order Syfte: \u00d6ka andelen kunder som g\u00f6r ett n\u00e4sta k\u00f6p","title":"Tack f\u00f6r senast order rekommendation: Last purchase"},{"location":"Platform/Recommendations/Infobaleen%20recommended%20recommendation%20profiles/#produkter-pa-rea-rekommendationer-on-sale","text":"Rekommendera produkter som \u00e4r p\u00e5 rea Syfte: \u00d6ka rea fsg genom att visa relevanta produkter p\u00e5 rea.","title":"Produkter p\u00e5 rea rekommendationer: On sale"},{"location":"Platform/Recommendations/Overview/","text":"Recommendations UI You can use the platform to create personalized product recommendations that can be added to your website, checkout flow or in email campaigns. You can create customizable API recommendations profiles with filters and rules based on your product meta data, and apply them to different use cases. Below is an example how the recommendations tab can look. By clicking the cog wheel you will open the settings.","title":"Overview"},{"location":"Platform/Recommendations/Overview/#recommendations-ui","text":"You can use the platform to create personalized product recommendations that can be added to your website, checkout flow or in email campaigns. You can create customizable API recommendations profiles with filters and rules based on your product meta data, and apply them to different use cases. Below is an example how the recommendations tab can look. By clicking the cog wheel you will open the settings.","title":"Recommendations UI"},{"location":"Platform/Recommendations/Recommendations%20in%20emails/","text":"Recommendations in emails Introduction We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user. Partners Here we specify how the process works between us and specified partners Voyado Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000,\"Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528\",9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10,\"Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515\",9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3,\"Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150\",9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history.","title":"Recommendations in emails"},{"location":"Platform/Recommendations/Recommendations%20in%20emails/#recommendations-in-emails","text":"","title":"Recommendations in emails"},{"location":"Platform/Recommendations/Recommendations%20in%20emails/#introduction","text":"We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user.","title":"Introduction"},{"location":"Platform/Recommendations/Recommendations%20in%20emails/#partners","text":"Here we specify how the process works between us and specified partners","title":"Partners"},{"location":"Platform/Recommendations/Recommendations%20in%20emails/#voyado","text":"Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000,\"Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528\",9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10,\"Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515\",9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3,\"Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150\",9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history.","title":"Voyado"},{"location":"Platform/Recommendations/Settings/","text":"Settings Here we explain the different settings fields that can be seen after clicing the cog wheel. Search Columns Columns are the data columns that can be used to create filters and rules. These are activated in the data model with the MlFilter toggle (MlFilter = Machine Learning Filter), see the image below. Filter expression Here you can write an expression that creates a filter for your recommendation profile. For example, perhaps you just want to recommend products in a specific category, then you would write something like category = 'Kaffe & Te' , or price > 100 If the expression is True the product will be included in the recommendation, and it the expression is False the product will be filtered. In the case of price > 100 , the expression will return True for all products with a price larger than 100 thus removing all items with a price lower than 100 from the recommendations. Boost expression InteractionFilter Trend Trend limits the time interval for the data that the recomendations are based on. Max trend uses a short time interval resulting in the machine-learning model only recommending products that are trending last few weeks. Limit Limit decides how many recomended items are returned. For example, Limit 4 = Four recommended items. Limit 12 = 12 recommended items. Max orders Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account. Max interactions Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account. Allow items from history Sets a filter so that all items the user have bought cannot be recommended. Shuffled If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled. Advanced Create an advanced filter. Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. See an example below: Example of advanced quey {\"Context\":[{\"Name\":\"bought_phone_model\",\"Field\":\"phone_model\",\"Option\":\"all\"}]} Filter expression: hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example: Add field limit Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category. Save as new profile Saves the current configuration as a profile new Save profile Overrides the current profile with the current configuration. Delete profile Delets selected profile.","title":"Settings"},{"location":"Platform/Recommendations/Settings/#settings","text":"Here we explain the different settings fields that can be seen after clicing the cog wheel.","title":"Settings"},{"location":"Platform/Recommendations/Settings/#search","text":"","title":"Search"},{"location":"Platform/Recommendations/Settings/#columns","text":"Columns are the data columns that can be used to create filters and rules. These are activated in the data model with the MlFilter toggle (MlFilter = Machine Learning Filter), see the image below.","title":"Columns"},{"location":"Platform/Recommendations/Settings/#filter-expression","text":"Here you can write an expression that creates a filter for your recommendation profile. For example, perhaps you just want to recommend products in a specific category, then you would write something like category = 'Kaffe & Te' , or price > 100 If the expression is True the product will be included in the recommendation, and it the expression is False the product will be filtered. In the case of price > 100 , the expression will return True for all products with a price larger than 100 thus removing all items with a price lower than 100 from the recommendations.","title":"Filter expression"},{"location":"Platform/Recommendations/Settings/#boost-expression","text":"","title":"Boost expression"},{"location":"Platform/Recommendations/Settings/#interactionfilter","text":"","title":"InteractionFilter"},{"location":"Platform/Recommendations/Settings/#trend","text":"Trend limits the time interval for the data that the recomendations are based on. Max trend uses a short time interval resulting in the machine-learning model only recommending products that are trending last few weeks.","title":"Trend"},{"location":"Platform/Recommendations/Settings/#limit","text":"Limit decides how many recomended items are returned. For example, Limit 4 = Four recommended items. Limit 12 = 12 recommended items.","title":"Limit"},{"location":"Platform/Recommendations/Settings/#max-orders","text":"Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account.","title":"Max orders"},{"location":"Platform/Recommendations/Settings/#max-interactions","text":"Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account.","title":"Max interactions"},{"location":"Platform/Recommendations/Settings/#allow-items-from-history","text":"Sets a filter so that all items the user have bought cannot be recommended.","title":"Allow items from history"},{"location":"Platform/Recommendations/Settings/#shuffled","text":"If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled.","title":"Shuffled"},{"location":"Platform/Recommendations/Settings/#advanced","text":"Create an advanced filter. Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. See an example below:","title":"Advanced"},{"location":"Platform/Recommendations/Settings/#example-of-advanced-quey","text":"{\"Context\":[{\"Name\":\"bought_phone_model\",\"Field\":\"phone_model\",\"Option\":\"all\"}]} Filter expression: hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example:","title":"Example of advanced quey"},{"location":"Platform/Recommendations/Settings/#add-field-limit","text":"Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category.","title":"Add field limit"},{"location":"Platform/Recommendations/Settings/#save-as-new-profile","text":"Saves the current configuration as a profile new","title":"Save as new profile"},{"location":"Platform/Recommendations/Settings/#save-profile","text":"Overrides the current profile with the current configuration.","title":"Save profile"},{"location":"Platform/Recommendations/Settings/#delete-profile","text":"Delets selected profile.","title":"Delete profile"},{"location":"Platform/Segmentations/Auto-targeting/","text":"Auto-targeting Auto-targeting identifies optimal combinations of items and users that helps increase conversion in campaigns. The results are based on the results from the machine-learning models. The result is groups with recommended users-items combinations to use in the advertisements, see the overview below: graph TD; Campaign-->SelectRecipients; SelectRecipients-->Advertisement1; SelectRecipients-->Advertisement2; SelectRecipients-->Advertisement3; Advertisement1-->SelectItems1; Advertisement2-->SelectItems2; Advertisement3-->SelectItems3; SelectItems1-->AddFilters1; SelectItems2-->AddFilters2; SelectItems3-->AddFilters3; Step 1: Initiate auto-targeting campaign Choose the Auto Targeting tab Create a new auto-targeting campaign by clicking the + icon in the upper right corner Name the auto-targeting model (in the image below Auto-targeting test ), and choose the maximum number of recipients for the campaign. Note that Available recipients indicates the total number of users that exists in the data Step 2: Choose recipients After the campaign has been created, now it's time to set the recipients (audience) for the campaign. To filter the data for various campaigns, click the filter icon to the right of the user icon Choose a filter according to your needs. In the below image, users have been filtered to contains those with age 20-25 that are registered in Sweden. Step 3: Create advertisements To set up an advertisement click the + icon under the auto-targeting card. Name the advertisement and click the + icon and Select items to target This will trigger some settings to pop up above. * ignore already consumed : used to block so that users do not end up in a campaign that they already bought from. For example, if you have a campaign including Product1 and a user has already bought that product, then you may want to make sure that the user can not end up in a campaign inlcuding that product. * Trend : If you choose a high trend value, then seasonal trends in sales will have higher weight (e.g. during Christmas more Santa Claus-products are probably sold) * Item.multiplier (?) and Recipient multiplier (?) : These can be ignored. The idea is that you can weight the score for a user or item. Ex: item.price, or user.propensity for item resp. user. But it is experimental and seldom used. Now you can choose to add how many items to include in your advertisement, and what filters should apply. You can also add additionalt filters for the recipients. When ready, press Save and Run . The result will look similar to the image below. You can see the products included in the advertisement, the number of recipients, and an average recipient score and its distribution. The recipient score is a value from 0 to 1, where 1 indicates a very strong match between the user and the advertisement. In this case, a recommendation would be to only use the first 30% recipients or so in the advertisement, since the scores for the long tail of users is low.","title":"Auto-targeting"},{"location":"Platform/Segmentations/Auto-targeting/#auto-targeting","text":"Auto-targeting identifies optimal combinations of items and users that helps increase conversion in campaigns. The results are based on the results from the machine-learning models. The result is groups with recommended users-items combinations to use in the advertisements, see the overview below: graph TD; Campaign-->SelectRecipients; SelectRecipients-->Advertisement1; SelectRecipients-->Advertisement2; SelectRecipients-->Advertisement3; Advertisement1-->SelectItems1; Advertisement2-->SelectItems2; Advertisement3-->SelectItems3; SelectItems1-->AddFilters1; SelectItems2-->AddFilters2; SelectItems3-->AddFilters3;","title":"Auto-targeting"},{"location":"Platform/Segmentations/Auto-targeting/#step-1-initiate-auto-targeting-campaign","text":"Choose the Auto Targeting tab Create a new auto-targeting campaign by clicking the + icon in the upper right corner Name the auto-targeting model (in the image below Auto-targeting test ), and choose the maximum number of recipients for the campaign. Note that Available recipients indicates the total number of users that exists in the data","title":"Step 1: Initiate auto-targeting campaign"},{"location":"Platform/Segmentations/Auto-targeting/#step-2-choose-recipients","text":"After the campaign has been created, now it's time to set the recipients (audience) for the campaign. To filter the data for various campaigns, click the filter icon to the right of the user icon Choose a filter according to your needs. In the below image, users have been filtered to contains those with age 20-25 that are registered in Sweden.","title":"Step 2: Choose recipients"},{"location":"Platform/Segmentations/Auto-targeting/#step-3-create-advertisements","text":"To set up an advertisement click the + icon under the auto-targeting card. Name the advertisement and click the + icon and Select items to target This will trigger some settings to pop up above. * ignore already consumed : used to block so that users do not end up in a campaign that they already bought from. For example, if you have a campaign including Product1 and a user has already bought that product, then you may want to make sure that the user can not end up in a campaign inlcuding that product. * Trend : If you choose a high trend value, then seasonal trends in sales will have higher weight (e.g. during Christmas more Santa Claus-products are probably sold) * Item.multiplier (?) and Recipient multiplier (?) : These can be ignored. The idea is that you can weight the score for a user or item. Ex: item.price, or user.propensity for item resp. user. But it is experimental and seldom used. Now you can choose to add how many items to include in your advertisement, and what filters should apply. You can also add additionalt filters for the recipients. When ready, press Save and Run . The result will look similar to the image below. You can see the products included in the advertisement, the number of recipients, and an average recipient score and its distribution. The recipient score is a value from 0 to 1, where 1 indicates a very strong match between the user and the advertisement. In this case, a recommendation would be to only use the first 30% recipients or so in the advertisement, since the scores for the long tail of users is low.","title":"Step 3: Create advertisements"},{"location":"Platform/Segmentations/Clustering/","text":"Clustering Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, plsa , Probabilistic Latent Semantic Analysis run separately, and modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model.","title":"Clustering"},{"location":"Platform/Segmentations/Clustering/#clustering","text":"Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, plsa , Probabilistic Latent Semantic Analysis run separately, and modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model.","title":"Clustering"}]}