{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Infobaleen Documentation Welcome to the docs! Analytics Gain insights on your business from our interactive and customizable dashboards by diving deep into your trove of data. Learn what drives your new customers, find out what makes your customers churn, explore your clusters and segments and much more. Dashboards Segmentations Make powerful segmentations for your marketing campaigns and export your results directly to your CRM-system or a marketing tool like Facebook Ads or Google Ads. Target specific products and let our machine learning model segment users optimally according to products you want to sell and your campaign goals. Auto-targeting Clustering Recommendations Use personalized product recommendations in your marketing to make your products relevant at all times. Add them on your landing page, in your checkout flow or use them to automate your email content. Create customizable API profiles with filters and rules based on your product meta data, and apply them to different use cases. Ex one for your landing page, one for your user browse sessions and one for your email content. Recommendations","title":"Home"},{"location":"#infobaleen-documentation","text":"Welcome to the docs!","title":"Infobaleen Documentation"},{"location":"Platform/Analytics/Customer Insights/","text":"Customer Insights","title":"Customer Insights"},{"location":"Platform/Analytics/Customer Insights/#customer-insights","text":"","title":"Customer Insights"},{"location":"Platform/Analytics/Dashboards/","text":"Table of Contents Add element Metric Bar Chart Line Chart Default (line chart) Style (line chart) Advanced (line chart) Select group key Histogram Date filter Range filter Filter Metric selector Alluvial Chart Markov Chart Table Pivot Image grid Segments Categories Text Content Back to top Add element Back to top Metric A metric is a single number, wich means that you can not show a field in a metric element (a field is an array of metrics). you can convert a field into a metric by writing an expression ex. SUM(field) this returns a metric. Back to top Bar Chart A bar chart shows categorical data with rectangular bars indicating the distributions of the data , in the picture below, we for example see amount of unique customers per country , the bar charts can be used to adapt the dashboard to show only data from one specific country. Simply press the country you want to see information about, and the dashboard will update accordingly. Back to top Line Chart A line chart plots a graph with data points connected to a chosen metric, example below for example shows revenue over time. Hovering over the line chart data points, the revenue for that time will show. Back to top Default (line chart) Under default you can choose what values you want to include in your line chart, you can also select if you want the view to be from day to week, month etc. The Format selection lets you choose how many decimals you want, if you want the values to be shown as a percentage (%). The Limit lets you decide how many data points you want to show (the dots marked on the line). Back to top Style (line chart) Here you can change the appearance of the linechart in the dashboards, feel free to test how the different margin settings affect the look of the line chart! By changing the Title or the Sub title no values will be changed, by changing it the chosen values only gets an alias. Back to top Advanced (line chart) In the advanced tab you can select a Group key , you can read what that means here Back to top Select group key By addining a field in the select group key the line chart will show multiple lines where each line represents a category in the selected field. This function should be combined with a bar chart where you can create a filter for the selected field. by filtering out categories in the barchart the line chart will show the remaning categories. By filtering out a category in the barchart the line representing this category is removed from the line chart. Back to top Histogram A histogram is a graphical representation that shows data in specified ranges as vertical bins. It's similar to a bar chart. Back to top Date filter The Date filter lets you adapt your dashboards to only show data for a chosen period of time, there are some premade limits, for example last week, last year etc. These can be found and chosen on the top of the date filter box after pressing it, you can also select a specified range of days by using the calendar. Back to top Range filter Range filter allows you to only show data in the dashboards where a chosen value is within the chosen limit, for example if you only want to show data for items with prices between 100sek to 200sek. Back to top Filter Filter can be used to only show one category of chosen metric, and update the dashboard accordingly. Back to top Metric selector In the different elements added to your dashboard, for example a bar chart or line chart, there's the opportunity to select *metric* , if you then add a Metric selector and choose a metric, all the elements where *metric* has been chosen, will be updated to match the chosen metric in the Metric selector . Using this will allow quicker changes of the data shown, as you can use the metric selector instead of manually changing the other elements. Back to top Alluvial Chart An alluvial chart can be described as a flow diagram that represents changes in structures over time, for us this is mostly used to represent how segments of customers are changed over time, going from new, to lapsed (lost) customers. (There's a Color scale option under Style where the colors can be changed to blue/green/yellow/red instead of different shades of blue) Example of alluvial chart shown below. Back to top Markov Chart Back to top Table This element adds a table to the dashboard, if the table gets to wide there's a scroll bar furthest down in the table allowing horizontal scrolling. The table can be sorted by pressing on the value/text you want to sort by. Under Style in the edit screen of a table, there's an opportunity to add a Backround bar which visualize how large/small the different values in the table are in comparison to the others. Back to top Pivot A pivot table is used to visualize patterns and trends in large amounts of data, it can for example be used to show amount of lapsed customers per order cohort shown in the example below. Back to top Image grid The image grid shows pictures of products in a dashboard. Back to top Segments Lets you show data for only a chosen segment, these segments can be created under the Segmentations part of the platform. Back to top Categories Similar to barchart, categories let's you choose what category to show data for, when the data is several categories in one cell, for example Color = [red;blue] where red and blue are not correlated. Back to top Text Content The text content element is the most used element, it's basically just text that can be adapted through markdown language, for example # = header1 (largest) ## = header2, ### header3 etc. Back to top","title":"Dashboards"},{"location":"Platform/Analytics/Dashboards/#table-of-contents","text":"Add element Metric Bar Chart Line Chart Default (line chart) Style (line chart) Advanced (line chart) Select group key Histogram Date filter Range filter Filter Metric selector Alluvial Chart Markov Chart Table Pivot Image grid Segments Categories Text Content Back to top","title":"Table of Contents"},{"location":"Platform/Analytics/Dashboards/#add-element","text":"Back to top","title":"Add element"},{"location":"Platform/Analytics/Dashboards/#metric","text":"A metric is a single number, wich means that you can not show a field in a metric element (a field is an array of metrics). you can convert a field into a metric by writing an expression ex. SUM(field) this returns a metric. Back to top","title":"Metric"},{"location":"Platform/Analytics/Dashboards/#bar-chart","text":"A bar chart shows categorical data with rectangular bars indicating the distributions of the data , in the picture below, we for example see amount of unique customers per country , the bar charts can be used to adapt the dashboard to show only data from one specific country. Simply press the country you want to see information about, and the dashboard will update accordingly. Back to top","title":"Bar Chart"},{"location":"Platform/Analytics/Dashboards/#line-chart","text":"A line chart plots a graph with data points connected to a chosen metric, example below for example shows revenue over time. Hovering over the line chart data points, the revenue for that time will show. Back to top","title":"Line Chart"},{"location":"Platform/Analytics/Dashboards/#default-line-chart","text":"Under default you can choose what values you want to include in your line chart, you can also select if you want the view to be from day to week, month etc. The Format selection lets you choose how many decimals you want, if you want the values to be shown as a percentage (%). The Limit lets you decide how many data points you want to show (the dots marked on the line). Back to top","title":"Default (line chart)"},{"location":"Platform/Analytics/Dashboards/#style-line-chart","text":"Here you can change the appearance of the linechart in the dashboards, feel free to test how the different margin settings affect the look of the line chart! By changing the Title or the Sub title no values will be changed, by changing it the chosen values only gets an alias. Back to top","title":"Style (line chart)"},{"location":"Platform/Analytics/Dashboards/#advanced-line-chart","text":"In the advanced tab you can select a Group key , you can read what that means here Back to top","title":"Advanced (line chart)"},{"location":"Platform/Analytics/Dashboards/#select-group-key","text":"By addining a field in the select group key the line chart will show multiple lines where each line represents a category in the selected field. This function should be combined with a bar chart where you can create a filter for the selected field. by filtering out categories in the barchart the line chart will show the remaning categories. By filtering out a category in the barchart the line representing this category is removed from the line chart. Back to top","title":"Select group key"},{"location":"Platform/Analytics/Dashboards/#histogram","text":"A histogram is a graphical representation that shows data in specified ranges as vertical bins. It's similar to a bar chart. Back to top","title":"Histogram"},{"location":"Platform/Analytics/Dashboards/#date-filter","text":"The Date filter lets you adapt your dashboards to only show data for a chosen period of time, there are some premade limits, for example last week, last year etc. These can be found and chosen on the top of the date filter box after pressing it, you can also select a specified range of days by using the calendar. Back to top","title":"Date filter"},{"location":"Platform/Analytics/Dashboards/#range-filter","text":"Range filter allows you to only show data in the dashboards where a chosen value is within the chosen limit, for example if you only want to show data for items with prices between 100sek to 200sek. Back to top","title":"Range filter"},{"location":"Platform/Analytics/Dashboards/#filter","text":"Filter can be used to only show one category of chosen metric, and update the dashboard accordingly. Back to top","title":"Filter"},{"location":"Platform/Analytics/Dashboards/#metric-selector","text":"In the different elements added to your dashboard, for example a bar chart or line chart, there's the opportunity to select *metric* , if you then add a Metric selector and choose a metric, all the elements where *metric* has been chosen, will be updated to match the chosen metric in the Metric selector . Using this will allow quicker changes of the data shown, as you can use the metric selector instead of manually changing the other elements. Back to top","title":"Metric selector"},{"location":"Platform/Analytics/Dashboards/#alluvial-chart","text":"An alluvial chart can be described as a flow diagram that represents changes in structures over time, for us this is mostly used to represent how segments of customers are changed over time, going from new, to lapsed (lost) customers. (There's a Color scale option under Style where the colors can be changed to blue/green/yellow/red instead of different shades of blue) Example of alluvial chart shown below. Back to top","title":"Alluvial Chart"},{"location":"Platform/Analytics/Dashboards/#markov-chart","text":"Back to top","title":"Markov Chart"},{"location":"Platform/Analytics/Dashboards/#table","text":"This element adds a table to the dashboard, if the table gets to wide there's a scroll bar furthest down in the table allowing horizontal scrolling. The table can be sorted by pressing on the value/text you want to sort by. Under Style in the edit screen of a table, there's an opportunity to add a Backround bar which visualize how large/small the different values in the table are in comparison to the others. Back to top","title":"Table"},{"location":"Platform/Analytics/Dashboards/#pivot","text":"A pivot table is used to visualize patterns and trends in large amounts of data, it can for example be used to show amount of lapsed customers per order cohort shown in the example below. Back to top","title":"Pivot"},{"location":"Platform/Analytics/Dashboards/#image-grid","text":"The image grid shows pictures of products in a dashboard. Back to top","title":"Image grid"},{"location":"Platform/Analytics/Dashboards/#segments","text":"Lets you show data for only a chosen segment, these segments can be created under the Segmentations part of the platform. Back to top","title":"Segments"},{"location":"Platform/Analytics/Dashboards/#categories","text":"Similar to barchart, categories let's you choose what category to show data for, when the data is several categories in one cell, for example Color = [red;blue] where red and blue are not correlated. Back to top","title":"Categories"},{"location":"Platform/Analytics/Dashboards/#text-content","text":"The text content element is the most used element, it's basically just text that can be adapted through markdown language, for example # = header1 (largest) ## = header2, ### header3 etc. Back to top","title":"Text Content"},{"location":"Platform/Menu/Account/API Keys/","text":"API Keys An API key can be seen as a unique identifier used to authenticate a user to permit data sharing/collection. The API process starts with one API calling another API, and then sharing the API to gain access.","title":"API Keys"},{"location":"Platform/Menu/Account/API Keys/#api-keys","text":"An API key can be seen as a unique identifier used to authenticate a user to permit data sharing/collection. The API process starts with one API calling another API, and then sharing the API to gain access.","title":"API Keys"},{"location":"Platform/Menu/Account/Logout/","text":"Logout","title":"Logout"},{"location":"Platform/Menu/Account/Logout/#logout","text":"","title":"Logout"},{"location":"Platform/Menu/Account/Users/","text":"Users Here you can add, or manage the persons with access to the platform, you can also see how long it was since someone visited the platform.","title":"Users"},{"location":"Platform/Menu/Account/Users/#users","text":"Here you can add, or manage the persons with access to the platform, you can also see how long it was since someone visited the platform.","title":"Users"},{"location":"Platform/Menu/Admin/Clear CH chache/","text":"Clear CH chache","title":"Clear CH chache"},{"location":"Platform/Menu/Admin/Clear CH chache/#clear-ch-chache","text":"","title":"Clear CH chache"},{"location":"Platform/Menu/Admin/Configuration/","text":"Table of Contents Voyado Update this Rule Configuration API Keys Recommendations Data sync CLI Admin Back to top Voyado The voyado config needs three parameters that are the same for all lakes. These can be found on Bitwarden under Infobaleen/Voyado. The fourth parameter is the lake endpoint. This is found in Voyado's Azure data lake Example: { Root : /voyado/export , Directories : ['receipts'], ClientId : ${CLIENT_ID} , ClientSecret : ${CLIENT_SECRET} , DirectoryId : ${DIRECTORY_ID} , LakeUri : bangerhadcorestordlsprod.azuredatalakestore.net } Some comments: \"Directories\" : These are the directories that can be found in the Azure data lake There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ Back to top Update this Back to top Rule Back to top Configuration Integration with rule enables you export your Segmentation campaigns to rule Name: should be set to rule as standard Driver: rule config: {\"ApiKey\":\"${rule_api_key}\",\"KeyField\":\"email\"} where \"ApiKey\":\"${rule_api_key}\" is set in Secrets and \"KeyField\":\"email\" is set Default User Field: field name + KeyField wich is set to email in this case ex. if field name = email the Default user field becomes email email Name used in exports: ${PARENT_NAME}: ${INDEX_NAME} Optional User Fields: No idea. Back to top API Keys Name: should be set to rule-recommendations Back to top Recommendations ItemsToItems: Active dont know UserToItems: Active dont know ItemData: Active dont know ModelInfo: Inactive dont know Data Models: [Choose your data model with the recommendations of intrest] Profiles: [Choose the recommendation profiles you want to use] Back to top Data sync SourceSync: Inactive dont know Buffers: Inactive dont know Back to top CLI MLDump: Inactive dont know Db: Inactive dont know Back to top Admin Note: Immutable: An immutable key can never be updated (only removed). Useful if you want to share a key an be sure that the scope does not change by mistake AllowAll: Activates everything or just recomendations tags Back to top","title":"Configuration"},{"location":"Platform/Menu/Admin/Configuration/#table-of-contents","text":"Voyado Update this Rule Configuration API Keys Recommendations Data sync CLI Admin Back to top","title":"Table of Contents"},{"location":"Platform/Menu/Admin/Configuration/#voyado","text":"The voyado config needs three parameters that are the same for all lakes. These can be found on Bitwarden under Infobaleen/Voyado. The fourth parameter is the lake endpoint. This is found in Voyado's Azure data lake Example: { Root : /voyado/export , Directories : ['receipts'], ClientId : ${CLIENT_ID} , ClientSecret : ${CLIENT_SECRET} , DirectoryId : ${DIRECTORY_ID} , LakeUri : bangerhadcorestordlsprod.azuredatalakestore.net } Some comments: \"Directories\" : These are the directories that can be found in the Azure data lake There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ Back to top","title":"Voyado"},{"location":"Platform/Menu/Admin/Configuration/#update-this","text":"Back to top","title":"Update this"},{"location":"Platform/Menu/Admin/Configuration/#rule","text":"Back to top","title":"Rule"},{"location":"Platform/Menu/Admin/Configuration/#configuration","text":"Integration with rule enables you export your Segmentation campaigns to rule Name: should be set to rule as standard Driver: rule config: {\"ApiKey\":\"${rule_api_key}\",\"KeyField\":\"email\"} where \"ApiKey\":\"${rule_api_key}\" is set in Secrets and \"KeyField\":\"email\" is set Default User Field: field name + KeyField wich is set to email in this case ex. if field name = email the Default user field becomes email email Name used in exports: ${PARENT_NAME}: ${INDEX_NAME} Optional User Fields: No idea. Back to top","title":"Configuration"},{"location":"Platform/Menu/Admin/Configuration/#api-keys","text":"Name: should be set to rule-recommendations Back to top","title":"API Keys"},{"location":"Platform/Menu/Admin/Configuration/#recommendations","text":"ItemsToItems: Active dont know UserToItems: Active dont know ItemData: Active dont know ModelInfo: Inactive dont know Data Models: [Choose your data model with the recommendations of intrest] Profiles: [Choose the recommendation profiles you want to use] Back to top","title":"Recommendations"},{"location":"Platform/Menu/Admin/Configuration/#data-sync","text":"SourceSync: Inactive dont know Buffers: Inactive dont know Back to top","title":"Data sync"},{"location":"Platform/Menu/Admin/Configuration/#cli","text":"MLDump: Inactive dont know Db: Inactive dont know Back to top","title":"CLI"},{"location":"Platform/Menu/Admin/Configuration/#admin","text":"Note: Immutable: An immutable key can never be updated (only removed). Useful if you want to share a key an be sure that the scope does not change by mistake AllowAll: Activates everything or just recomendations tags Back to top","title":"Admin"},{"location":"Platform/Menu/Admin/Connections/","text":"Connections","title":"Connections"},{"location":"Platform/Menu/Admin/Connections/#connections","text":"","title":"Connections"},{"location":"Platform/Menu/Admin/Events/","text":"Events","title":"Events"},{"location":"Platform/Menu/Admin/Events/#events","text":"","title":"Events"},{"location":"Platform/Menu/Admin/Secrets/","text":"Secrets A secret can be seen as a password we want to hide, but use an alias for. An example of a secret is the API key we need to receive centra information for a customer of ours. When creating a secret firstly a Label is chosen, which means by what name we will know the secret by, followed by a Secret , an API key or similar that we want to store, but not visible for us.","title":"Secrets"},{"location":"Platform/Menu/Admin/Secrets/#secrets","text":"A secret can be seen as a password we want to hide, but use an alias for. An example of a secret is the API key we need to receive centra information for a customer of ours. When creating a secret firstly a Label is chosen, which means by what name we will know the secret by, followed by a Secret , an API key or similar that we want to store, but not visible for us.","title":"Secrets"},{"location":"Platform/Menu/Documentation/API/","text":"API","title":"API"},{"location":"Platform/Menu/Documentation/API/#api","text":"","title":"API"},{"location":"Platform/Menu/Documentation/Agent/","text":"Agent","title":"Agent"},{"location":"Platform/Menu/Documentation/Agent/#agent","text":"","title":"Agent"},{"location":"Platform/Menu/Documentation/New Issue/","text":"New issue If you've found something not working properly an issue should be created, it's shortly explained a ticket for what's wrong in the current situation, and how it should be changed to. The link takes you to github where the issue will be addressed.","title":"New Issue"},{"location":"Platform/Menu/Documentation/New Issue/#new-issue","text":"If you've found something not working properly an issue should be created, it's shortly explained a ticket for what's wrong in the current situation, and how it should be changed to. The link takes you to github where the issue will be addressed.","title":"New issue"},{"location":"Platform/Menu/Manage Data/Data Models/","text":"Table of Contents What is a datamodel? Interaction config Fields field alias role Active Interaction Expressions Item config Fields field alias role MLMeta MLFilter Active Item Expressions User config Fields field alias role User Expressions Persona Custom properties Expression syntax (Click house) Data model expression examples Interaction expression User expressions Back to top What is a datamodel? A datamodel is made up of of 3 tables (from the sources), an interaction, user and item table. Each line in the interaction table is linked to a user and an item in the item and user table. When we have chosen what sources should make up our interaction, item and user table we can create a datamodel. After this we can start creating additional information through expressions. These can later be used in dashboards (dashboards are based upon a datamodel). classDiagram `Interaction table` --* Datamodel `Item table` --* Datamodel `User table` --* Datamodel Datamodel: Fields Datamodel: Expressions Datamodel --* Dashboards Datamodel --* Segmentation Datamodel --* Recommendations When a datamodel is used for email analysis, the interaction becomes a specific email sent to a user , the user becomes the one receiving the email , and the email that was sent is treated as an item. Back to top Interaction config Back to top Fields Back to top field This is the name of the given in the source query (it can not be changed in the data model). Back to top alias By adding an alias the the field name is replaced by the alias name in the dashboard and segmentation. In Recommendation the field name is allways shown even if an alias is added. Back to top role Categories Categories is used when data is made up of multiple category 's. The data format for categories has to be [ category1 ; category2 ; category3 ; etc ] Revenue Revenue can only be set on 1 field and should be sales price (EX VAT) . The reason you set mark your sales price (EX VAT) with the revenue role is to generate suggested revenue related expressions. Quantity If a user buys multiple items of the same SKU at the same time this will be either represented as 1 interaction row with quantity x In this case that field should be set to Quantity . for some data souces this will be represented as x interaction rows without a quantity row. Timestamp The timestamp role should only be set to the field that represent the interaction timestamp (when the interaction took place). other timestamps such as return date etc. should instead be set to number. The timestamp role is needed to create suggested expressions. User The User role is set to the key-field that connects the interaction table to the user table. Item The Item role is set to the key-field that connects the interaction table to the Item table. Number The Number role is automatically set to all fields that only contains numbers (you can make toFloat( field ) without error). The number role lets you interact with a field as a number meaning you can make an calculation expressions such as if( field 100). If you want to make a histogram you can only use fields with role Number because you specify the bin width wich can only be done if the field is concidered a Number (does not work if the field is a Category ). Category All fields that can not be classified as a Number are classified as a Category . Category 's are used in for example Bar charts . Enum EnumCategories Back to top Active The Active toggle button lets you activate/deactivate a field. a deactivated field can not be used in dashboards. Back to top Interaction Expressions Back to top Item config Back to top Fields Back to top field same as in Interaction Back to top alias same as in Interaction Back to top role Categories same as in Interaction Timestamp The timestamp lets you work with unixtimestamp and shows the result in as a datetime (readable format). Format The format role represent the name of the item and is what is shown in the Image grid in the dashboards and in the Recommendations Image The image role represent what field will be shown as a image in the Image grid in the dashboards and in the Recommendations . The image field is usually called something with url . Number same as in Interaction Category same as in Interaction Enum dont know as in Interaction... EnumCategories dont know as in Interaction... Back to top MLMeta The MLMeta toggle button controles what is returned when when you make an API call. This is to give you control what data you want to return to the customer. you dont want to activate MLMeta on all fields because this will result in you return alot of \"trash columns\" to the customer that they have to filter in turn get the relevant data. [Note that you also have to select the role Image and Format for the product to show] (MLMeta is only relevant in the recomendations view) Back to top MLFilter The MLFilter lets you write expressions and filter your data in in the Recommendations . You should only activate MLFilter for the fields you actually want to create a filter for, the reason for this is that when you activate MLFilter for a field this will store all data in the memory and every time the API calls for a recommendation the datamodel have to itterate through all fields with MLFilter resulting in a bad performance on the customers side (when the customer want to load our recomendations on their site the load speed will depend on how many MLFilters you have activated. Back to top Active Same as in Interaction Back to top Item Expressions Back to top User config Back to top Fields Back to top field same as in Interaction Back to top alias same as in Interaction Back to top role Categories same as in Interaction Timestamp same as in Items Pll Email Number same as in Interaction Category same as in Interaction Enum ???? EnumCategories ???? Back to top User Expressions Back to top Persona The Persona toggle button controles what columns are used in the recommendations. For example, if we activate the field gender as a Persona, the recommendation engine will base the recommendations on what gender the user has. If we active the field age it will be used as a dimension in the recommendation, and so on. Note: Use a maximum of 2 columns to define persona. Alternatively, make sure that the cardinality (number of groups) is less than 1000. (ex gender: 2 different and cities: 500 different, which means 2*500 = 1000 groups) Back to top Custom properties Great feature with good UX BUT only works for a specific preprogrammed examples (RFM, CustomerLifcycle). Back to top Expression syntax (Click house) SUM() Summarize a value, for example SUM(returned_quantity) returns the total amount of returned quantity (over chosen period of time) uniq() counts the amount of unique values, for example uniq(user) returns the amount of unique users. uniqExact() Is almost the same as uniq(), however uniq() may have a very small inaccuracy (that most often doesn't matter at all), but if it's important to have for example 100.002 (correct) instead of 100.000, use uniqExact(). The reason for this is simply that uniq() is less demanding. countIf() this counts +1 for each time an argument is correct on an interaction (row). Example : let's say there's 10 interactions (ten rows) in a table with a column that's currency. On 7 of the 10 rows the currency column consists of 'SEK', if we now use countIf(currency = 'SEK') we will get the value 7. sumIf() sumIf(Value that will be summarized when, X = N) Example : sumIf(revenue, currency = 'SEK') uniqIf() multiIf(boolean, result_1, boolean, result_2, ..., boolean, result_n, else_this) multiIf(name = 'red', colour, name = 'big', 'size', 'no data') Back to top Data model expression examples Back to top Interaction expression Days since previous order cohort multiIf (agg.daysFromPrev =30,'1. 30', agg.daysFromPrev =60,'2.30-60', agg.daysFromPrev =90,'3.60-90', agg.daysFromPrev =180,'4.90-180', agg.daysFromPrev =360,'5.180-360', agg.daysFromPrev =720,'6. 360-720', agg.daysFromPrev =4000,'7. 720', '8.New') Has return multiIf(returned_quantity 0, 'Return', 'No return') First order (month toStartOfMonth(user.agg.first) Active week toMonday(ts) Active month toStartOfMonth(ts) % discount SUM(full_price-revenue)/SUM(full_price) Revenue SUM(revenue) Price per item SUM(revenue)/SUM(quantity) Revenue per user SUM(revenue)/uniq(user) Average order value SUM(revenue)/uniq(user,ts) Sold items SUM(quantity) Items per order SUM(quantity)/uniq(user,ts) % returned quantity SUM(returned_quantity)/SUM(quantity) LTV 30d We usually do 5 different LTV metrics, just remember to change name accordingly to selected amount of days sumIf(revenue, ts user.agg.first + 30 AND addDays(user.agg.first, 30) = now())/uniqIf(user,addDays(user.agg.first, 30) = now()) sumIf(revenue, ts user.agg.first + 60 AND addDays(user.agg.first, 60) = now())/uniqIf(user,addDays(user.agg.first, 60) = now()) sumIf(revenue, ts user.agg.first + 90 AND addDays(user.agg.first, 90) = now())/uniqIf(user,addDays(user.agg.first, 90) = now()) sumIf(revenue, ts user.agg.first + 180 AND addDays(user.agg.first, 180) = now())/uniqIf(user,addDays(user.agg.first, 180) = now()) sumIf(revenue, ts user.agg.first + 365 AND addDays(user.agg.first, 365) = now())/uniqIf(user,addDays(user.agg.first, 365) = now()) Returned quantity SUM(returned_quantity) Returned or not returned multiIf(returned_quantity 0, 'Return', 'No return') Available quantity SUM(item.variant_product_size_size_available_now_quantity)/count() Back to top User expressions Users 1 order uniqIf(user,user.agg.orders 1)/uniq(user) ITEM expressions Sold items [item based dashboards] SUM(article_number.agg.trans) Available quantity [item based dashboards] SUM(item.in_stock) SUM(full_price-PriceExVatIncDiscSEK)/SUM(full_price) SUM(DiscountSEK) / SUM((DiscountSEK + PriceIncVatIncDiscSEK) Back to top","title":"Data Models"},{"location":"Platform/Menu/Manage Data/Data Models/#table-of-contents","text":"What is a datamodel? Interaction config Fields field alias role Active Interaction Expressions Item config Fields field alias role MLMeta MLFilter Active Item Expressions User config Fields field alias role User Expressions Persona Custom properties Expression syntax (Click house) Data model expression examples Interaction expression User expressions Back to top","title":"Table of Contents"},{"location":"Platform/Menu/Manage Data/Data Models/#what-is-a-datamodel","text":"A datamodel is made up of of 3 tables (from the sources), an interaction, user and item table. Each line in the interaction table is linked to a user and an item in the item and user table. When we have chosen what sources should make up our interaction, item and user table we can create a datamodel. After this we can start creating additional information through expressions. These can later be used in dashboards (dashboards are based upon a datamodel). classDiagram `Interaction table` --* Datamodel `Item table` --* Datamodel `User table` --* Datamodel Datamodel: Fields Datamodel: Expressions Datamodel --* Dashboards Datamodel --* Segmentation Datamodel --* Recommendations When a datamodel is used for email analysis, the interaction becomes a specific email sent to a user , the user becomes the one receiving the email , and the email that was sent is treated as an item. Back to top","title":"What is a datamodel?"},{"location":"Platform/Menu/Manage Data/Data Models/#interaction-config","text":"Back to top","title":"Interaction config"},{"location":"Platform/Menu/Manage Data/Data Models/#fields","text":"Back to top","title":"Fields"},{"location":"Platform/Menu/Manage Data/Data Models/#field","text":"This is the name of the given in the source query (it can not be changed in the data model). Back to top","title":"field"},{"location":"Platform/Menu/Manage Data/Data Models/#alias","text":"By adding an alias the the field name is replaced by the alias name in the dashboard and segmentation. In Recommendation the field name is allways shown even if an alias is added. Back to top","title":"alias"},{"location":"Platform/Menu/Manage Data/Data Models/#role","text":"Categories Categories is used when data is made up of multiple category 's. The data format for categories has to be [ category1 ; category2 ; category3 ; etc ] Revenue Revenue can only be set on 1 field and should be sales price (EX VAT) . The reason you set mark your sales price (EX VAT) with the revenue role is to generate suggested revenue related expressions. Quantity If a user buys multiple items of the same SKU at the same time this will be either represented as 1 interaction row with quantity x In this case that field should be set to Quantity . for some data souces this will be represented as x interaction rows without a quantity row. Timestamp The timestamp role should only be set to the field that represent the interaction timestamp (when the interaction took place). other timestamps such as return date etc. should instead be set to number. The timestamp role is needed to create suggested expressions. User The User role is set to the key-field that connects the interaction table to the user table. Item The Item role is set to the key-field that connects the interaction table to the Item table. Number The Number role is automatically set to all fields that only contains numbers (you can make toFloat( field ) without error). The number role lets you interact with a field as a number meaning you can make an calculation expressions such as if( field 100). If you want to make a histogram you can only use fields with role Number because you specify the bin width wich can only be done if the field is concidered a Number (does not work if the field is a Category ). Category All fields that can not be classified as a Number are classified as a Category . Category 's are used in for example Bar charts . Enum EnumCategories Back to top","title":"role"},{"location":"Platform/Menu/Manage Data/Data Models/#active","text":"The Active toggle button lets you activate/deactivate a field. a deactivated field can not be used in dashboards. Back to top","title":"Active"},{"location":"Platform/Menu/Manage Data/Data Models/#interaction-expressions","text":"Back to top","title":"Interaction Expressions"},{"location":"Platform/Menu/Manage Data/Data Models/#item-config","text":"Back to top","title":"Item config"},{"location":"Platform/Menu/Manage Data/Data Models/#fields_1","text":"Back to top","title":"Fields"},{"location":"Platform/Menu/Manage Data/Data Models/#field_1","text":"same as in Interaction Back to top","title":"field"},{"location":"Platform/Menu/Manage Data/Data Models/#alias_1","text":"same as in Interaction Back to top","title":"alias"},{"location":"Platform/Menu/Manage Data/Data Models/#role_1","text":"Categories same as in Interaction Timestamp The timestamp lets you work with unixtimestamp and shows the result in as a datetime (readable format). Format The format role represent the name of the item and is what is shown in the Image grid in the dashboards and in the Recommendations Image The image role represent what field will be shown as a image in the Image grid in the dashboards and in the Recommendations . The image field is usually called something with url . Number same as in Interaction Category same as in Interaction Enum dont know as in Interaction... EnumCategories dont know as in Interaction... Back to top","title":"role"},{"location":"Platform/Menu/Manage Data/Data Models/#mlmeta","text":"The MLMeta toggle button controles what is returned when when you make an API call. This is to give you control what data you want to return to the customer. you dont want to activate MLMeta on all fields because this will result in you return alot of \"trash columns\" to the customer that they have to filter in turn get the relevant data. [Note that you also have to select the role Image and Format for the product to show] (MLMeta is only relevant in the recomendations view) Back to top","title":"MLMeta"},{"location":"Platform/Menu/Manage Data/Data Models/#mlfilter","text":"The MLFilter lets you write expressions and filter your data in in the Recommendations . You should only activate MLFilter for the fields you actually want to create a filter for, the reason for this is that when you activate MLFilter for a field this will store all data in the memory and every time the API calls for a recommendation the datamodel have to itterate through all fields with MLFilter resulting in a bad performance on the customers side (when the customer want to load our recomendations on their site the load speed will depend on how many MLFilters you have activated. Back to top","title":"MLFilter"},{"location":"Platform/Menu/Manage Data/Data Models/#active_1","text":"Same as in Interaction Back to top","title":"Active"},{"location":"Platform/Menu/Manage Data/Data Models/#item-expressions","text":"Back to top","title":"Item Expressions"},{"location":"Platform/Menu/Manage Data/Data Models/#user-config","text":"Back to top","title":"User config"},{"location":"Platform/Menu/Manage Data/Data Models/#fields_2","text":"Back to top","title":"Fields"},{"location":"Platform/Menu/Manage Data/Data Models/#field_2","text":"same as in Interaction Back to top","title":"field"},{"location":"Platform/Menu/Manage Data/Data Models/#alias_2","text":"same as in Interaction Back to top","title":"alias"},{"location":"Platform/Menu/Manage Data/Data Models/#role_2","text":"Categories same as in Interaction Timestamp same as in Items Pll Email Number same as in Interaction Category same as in Interaction Enum ???? EnumCategories ???? Back to top","title":"role"},{"location":"Platform/Menu/Manage Data/Data Models/#user-expressions","text":"Back to top","title":"User Expressions"},{"location":"Platform/Menu/Manage Data/Data Models/#persona","text":"The Persona toggle button controles what columns are used in the recommendations. For example, if we activate the field gender as a Persona, the recommendation engine will base the recommendations on what gender the user has. If we active the field age it will be used as a dimension in the recommendation, and so on. Note: Use a maximum of 2 columns to define persona. Alternatively, make sure that the cardinality (number of groups) is less than 1000. (ex gender: 2 different and cities: 500 different, which means 2*500 = 1000 groups) Back to top","title":"Persona"},{"location":"Platform/Menu/Manage Data/Data Models/#custom-properties","text":"Great feature with good UX BUT only works for a specific preprogrammed examples (RFM, CustomerLifcycle). Back to top","title":"Custom properties"},{"location":"Platform/Menu/Manage Data/Data Models/#expression-syntax-click-house","text":"SUM() Summarize a value, for example SUM(returned_quantity) returns the total amount of returned quantity (over chosen period of time) uniq() counts the amount of unique values, for example uniq(user) returns the amount of unique users. uniqExact() Is almost the same as uniq(), however uniq() may have a very small inaccuracy (that most often doesn't matter at all), but if it's important to have for example 100.002 (correct) instead of 100.000, use uniqExact(). The reason for this is simply that uniq() is less demanding. countIf() this counts +1 for each time an argument is correct on an interaction (row). Example : let's say there's 10 interactions (ten rows) in a table with a column that's currency. On 7 of the 10 rows the currency column consists of 'SEK', if we now use countIf(currency = 'SEK') we will get the value 7. sumIf() sumIf(Value that will be summarized when, X = N) Example : sumIf(revenue, currency = 'SEK') uniqIf() multiIf(boolean, result_1, boolean, result_2, ..., boolean, result_n, else_this) multiIf(name = 'red', colour, name = 'big', 'size', 'no data') Back to top","title":"Expression syntax (Click house)"},{"location":"Platform/Menu/Manage Data/Data Models/#data-model-expression-examples","text":"Back to top","title":"Data model expression examples"},{"location":"Platform/Menu/Manage Data/Data Models/#interaction-expression","text":"Days since previous order cohort multiIf (agg.daysFromPrev =30,'1. 30', agg.daysFromPrev =60,'2.30-60', agg.daysFromPrev =90,'3.60-90', agg.daysFromPrev =180,'4.90-180', agg.daysFromPrev =360,'5.180-360', agg.daysFromPrev =720,'6. 360-720', agg.daysFromPrev =4000,'7. 720', '8.New') Has return multiIf(returned_quantity 0, 'Return', 'No return') First order (month toStartOfMonth(user.agg.first) Active week toMonday(ts) Active month toStartOfMonth(ts) % discount SUM(full_price-revenue)/SUM(full_price) Revenue SUM(revenue) Price per item SUM(revenue)/SUM(quantity) Revenue per user SUM(revenue)/uniq(user) Average order value SUM(revenue)/uniq(user,ts) Sold items SUM(quantity) Items per order SUM(quantity)/uniq(user,ts) % returned quantity SUM(returned_quantity)/SUM(quantity) LTV 30d We usually do 5 different LTV metrics, just remember to change name accordingly to selected amount of days sumIf(revenue, ts user.agg.first + 30 AND addDays(user.agg.first, 30) = now())/uniqIf(user,addDays(user.agg.first, 30) = now()) sumIf(revenue, ts user.agg.first + 60 AND addDays(user.agg.first, 60) = now())/uniqIf(user,addDays(user.agg.first, 60) = now()) sumIf(revenue, ts user.agg.first + 90 AND addDays(user.agg.first, 90) = now())/uniqIf(user,addDays(user.agg.first, 90) = now()) sumIf(revenue, ts user.agg.first + 180 AND addDays(user.agg.first, 180) = now())/uniqIf(user,addDays(user.agg.first, 180) = now()) sumIf(revenue, ts user.agg.first + 365 AND addDays(user.agg.first, 365) = now())/uniqIf(user,addDays(user.agg.first, 365) = now()) Returned quantity SUM(returned_quantity) Returned or not returned multiIf(returned_quantity 0, 'Return', 'No return') Available quantity SUM(item.variant_product_size_size_available_now_quantity)/count() Back to top","title":"Interaction expression"},{"location":"Platform/Menu/Manage Data/Data Models/#user-expressions_1","text":"Users 1 order uniqIf(user,user.agg.orders 1)/uniq(user)","title":"User expressions"},{"location":"Platform/Menu/Manage Data/Data Models/#item-expressions_1","text":"Sold items [item based dashboards] SUM(article_number.agg.trans) Available quantity [item based dashboards] SUM(item.in_stock) SUM(full_price-PriceExVatIncDiscSEK)/SUM(full_price) SUM(DiscountSEK) / SUM((DiscountSEK + PriceIncVatIncDiscSEK) Back to top","title":"ITEM expressions"},{"location":"Platform/Menu/Manage Data/Import Files/","text":"Table of Contents Import data to the platform Using a database connection (for Centra, Voyado, etc) Set up a configuration Make arbitrary query How to verify that the sync works? Using a file Back to top Import data to the platform Back to top Using a database connection (for Centra, Voyado, etc) First, make sure you know the origin files to fetch * For Voyado Go to the platform and then to Admin - Configuration (can be found at the top right menu by clicking the three dots, see example image below). Back to top Set up a configuration Add a database and name the Database based on the what system they use (centra, voyado, etc), and choose the matching Driver . In the Config field, check the standard URL provided by the corresponding ecommerce platform. Notes: A key or token is needed to access the databases. This key is listed under Admin - Secrets . For Centra customers there are fields that need to be specified: * \"Limit\":100000 : This is a limit so that we do not overload Centra servers when fetching data * \"Store\":1,\"Market\":3,\"PriceList\":19,\"Warehouses\":[2,3] : These are specifications to fetch the correct data, the customer seldom knows this but Centra should have the information. For Voyado customers there are fields that need to be specified: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ There is an option also to Add Integration . This part can be skipped, it is only used when we send data to customers. Back to top Make arbitrary query Create a source and make an arbitrary query similar to SELECT * FROM `users.gz` for Centra. You can list possible paths by using SELECT * FROM `*` . This will trigger a proxy sync, and if a Centra customer the .gz files will appear once completed. This normally takes 1-5 hours. Back to top How to verify that the sync works? Choose the source you created and press the pen to edit it. Go to the ADD QUERY tab and choose \u201cSELECT * FROM `*`\u201d . If the sync is ready, you will see a list of files to choose from, for example, users.gz , items.gz , interactions.gz , see image below. If you see the files imported you are now ready to create sources! Back to top Using a file Go to the platform and then to Manage data - Import files (can be found at the top right menu by clicking the three dots, see example image below). If the customer sent their data in a csv-file, drag it to the drop box for importing files. Uploaded files are available from the \"imports (csv-fs)\" database connection when creating new sources (see next step). Back to top","title":"Import Files"},{"location":"Platform/Menu/Manage Data/Import Files/#table-of-contents","text":"Import data to the platform Using a database connection (for Centra, Voyado, etc) Set up a configuration Make arbitrary query How to verify that the sync works? Using a file Back to top","title":"Table of Contents"},{"location":"Platform/Menu/Manage Data/Import Files/#import-data-to-the-platform","text":"Back to top","title":"Import data to the platform"},{"location":"Platform/Menu/Manage Data/Import Files/#using-a-database-connection-for-centra-voyado-etc","text":"First, make sure you know the origin files to fetch * For Voyado Go to the platform and then to Admin - Configuration (can be found at the top right menu by clicking the three dots, see example image below). Back to top","title":"Using a database connection (for Centra, Voyado, etc)"},{"location":"Platform/Menu/Manage Data/Import Files/#set-up-a-configuration","text":"Add a database and name the Database based on the what system they use (centra, voyado, etc), and choose the matching Driver . In the Config field, check the standard URL provided by the corresponding ecommerce platform. Notes: A key or token is needed to access the databases. This key is listed under Admin - Secrets . For Centra customers there are fields that need to be specified: * \"Limit\":100000 : This is a limit so that we do not overload Centra servers when fetching data * \"Store\":1,\"Market\":3,\"PriceList\":19,\"Warehouses\":[2,3] : These are specifications to fetch the correct data, the customer seldom knows this but Centra should have the information. For Voyado customers there are fields that need to be specified: * \"Directories\" : These are the directories that can be found in the Azure data lake * There are defauly directories that will be accessible without specifying them, these are store/ , receiptItems/ , article/ and allContacts/ There is an option also to Add Integration . This part can be skipped, it is only used when we send data to customers. Back to top","title":"Set up a configuration"},{"location":"Platform/Menu/Manage Data/Import Files/#make-arbitrary-query","text":"Create a source and make an arbitrary query similar to SELECT * FROM `users.gz` for Centra. You can list possible paths by using SELECT * FROM `*` . This will trigger a proxy sync, and if a Centra customer the .gz files will appear once completed. This normally takes 1-5 hours. Back to top","title":"Make arbitrary query"},{"location":"Platform/Menu/Manage Data/Import Files/#how-to-verify-that-the-sync-works","text":"Choose the source you created and press the pen to edit it. Go to the ADD QUERY tab and choose \u201cSELECT * FROM `*`\u201d . If the sync is ready, you will see a list of files to choose from, for example, users.gz , items.gz , interactions.gz , see image below. If you see the files imported you are now ready to create sources! Back to top","title":"How to verify that the sync works?"},{"location":"Platform/Menu/Manage Data/Import Files/#using-a-file","text":"Go to the platform and then to Manage data - Import files (can be found at the top right menu by clicking the three dots, see example image below). If the customer sent their data in a csv-file, drag it to the drop box for importing files. Uploaded files are available from the \"imports (csv-fs)\" database connection when creating new sources (see next step). Back to top","title":"Using a file"},{"location":"Platform/Menu/Manage Data/Results/","text":"Results","title":"Results"},{"location":"Platform/Menu/Manage Data/Results/#results","text":"","title":"Results"},{"location":"Platform/Menu/Manage Data/Sources/","text":"Table of Contents Create sources Frontpage columns Name id Cnf Version Count Tags Drivers Sync Dependencies Updated At Synced At Top Menu Delete Tag Migrate Truncate Sync Enable Disable Create Source settigs Name Id columns RunEvery Comment Merge filter Overview Query Database connection Load saved query Preprocessor directives Query expressions create a custom source UNION Standard Queries Centra Queries Procedure Interactions Items Users No size model Example rows with explanation Voyado Queries Procedure Interactions Items Users Google Feed Query Procedure Import Query Preprocess Directives Back to top Create sources When the data is imported , go to Manage Data - Sources and create a new source by clicking the purple plus sign as seen in the below image. Name the source import_[source of data]_[type of data] where [source of data] specifies where the data comes from (centra, voyado, etc), and the [type of data] specifies the data type (items, users, interactions, etc). Choose an identifier for the source using the Id columns field. If the source you\u2019re creating is for: interactions : we want to identify each interaction through a user, an item and the time of the purchase, therefore choose user,ts,item under id columns and then press create. items : we want to identify each item by using an item id (often sku or variant). users : we want to identify each user by using a user id. The fields Comment and Merge Filter can be left empty, and you can press CREATE . Choose database connection and create a QUERY If it\u2019s a centra/voyado customer choose that option, if the files were uploaded manually, choose imports. You can now see the query stage, as standard \u201cSELECT * FROM `*`\u201d will show, if you press \u201cEXECUTE PREVIEW SUMMARY\u201d you will see all the imported files you can choose to gather data from. Copy the filename you want to use and enter that name in the query above, like SELECT * FROM [ENTER FILENAME HERE] . Copy the queries (depending on what system the customer has) from here: Centra queries Voyado queries The import file is now done, press sync and save to exit. Now repeat the \"Create source\"-step 2 but name the file model_[source of data]_[type of data] (the use same identifier as in the import file). In the Choose database connection now choose source instead, and press execute preview summary , now choose the import source file and edit the query to select from that, like \" SELECT * FROM ENTER_SOURCENAME_HERE \" and then press Save and sync . Back to top Frontpage columns Back to top Name Name of source Back to top id every source has an unique id wich is used to show dependencies between sources. Back to top Cnf Version Back to top Count Count describes how many rows the source have. There can only be 1 row for every unique key column. if there are multiple rows with the same key all but 1 is removed. Back to top Tags you can tag a source to keep track of how it is used. Back to top Drivers The drivers show whatdriver is used and also if it is active (green) or inactive (red). If a source has multiple queries there will be multiple drivers, here you can see wich source is active and wich are not. Back to top Sync You can set a daily sync for the source, for example DailyAt:6 . Back to top Dependencies Dependencies for a source show what other sources the are used to build up the source. an example for this is SELECT * FROM Source1 LEFT JOIN Source2 on Source2.id = Source1.id UNION SELECT * FROM Source3 This will show the id for source 1,2,3 in the Dependencies for the new source. Back to top Updated At Shows how long ago the source was last modified. Back to top Synced At Shows how long ago the source was last synced. Back to top Top Menu Back to top Delete Back to top Tag Select a source, click Tag and write a new tag or select an old tag. Back to top Migrate Back to top Truncate Trucate wipes the source of all data. This is usefull if you have changed key column for example because if you just sync the data the old data is not removed. [Note that some sources only read 1 week data at the time to save time, if you truc a source like this all historic data is removed wich is bad] Back to top Sync Manually syncs the source. Back to top Enable doesnt work Back to top Disable doesnt work Back to top Create Creates a new source. Back to top Source settigs Back to top Name Just a name Back to top Id columns The Id columns has to be choosen to be unique. if the id is not unique (the same id for many rows) only 1 row will be saved and all others are removed. For the interaction table the id has to contain user AND id or ts,item. The reason user has to be an id column is because when user is the first id column all interactions are sorted on user first. this lets you use expressions such as agg.i wich count number of interactions a user has made. if the interaction table is not sorted on user first the aggregation functions doesnt work. For multiple id columns they are sorted in the order they are written. User,ts,item is sorted first on user, then on ts and lastly on item. SELECT CUSTOM COLUMNS is usefull if you want other names than the predefined such as SKU. Back to top RunEvery Set a sync Back to top Comment Back to top Merge filter lets you filter out your query before you save it. A Merge filter discards everything that is not true before saving the table. For example if you add a query similar to toFloat(ts) now()-100*24*3600 , then all timestamp (ts) data from later than 100 days will be discarded. Back to top Overview Shows what is in the source currently Back to top Query Back to top Database connection Back to top Load saved query lets you reload previously run queries Back to top Preprocessor directives when importing data from a link such as product feed you need to add preprocessor directives to know how to read the file. SELECT * FROM `url:https://files.channable.com/o2lQPJiYXk7KrY1DW2BJ3A==.xml` [Note that you have to write url: before https://] start by writing decoder=xml to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome Back to top Query expressions you need to enclose variable names that contain other characters than letters and numbers with backticks , this includes whitespace ' ', dot '.', etc... Back to top create a custom source SELECT * FROM raw: id,item 1,item1 2,item2 this returns a table. Back to top UNION A UNION merges two data sources by including all unique rows from both. When making a union the columns need to have the same name and be in the same order SELECT * FROM `table 1` UNION SELECT * FROM `table 2` if you have overlapping id rows in table 1 and table 2 the id in table 1 will be saved and table 2 will be discared. ex. to try this, create a test source select incr(1,50) AS id, 'table 1' AS item from ` RANDOM_SOURCE ` UNION select incr(1,1) AS id, 'table 2' AS item from ` RANDOM_SOURCE ` then create a new source SELECT * FROM ` TEST_SOURCE ` this will show that all overlapping ids will have item from table 1 . A UNION can also be suffixed by ALL, where UNION ALL will not discard duplicates, meaning much faster execution but leaves duplicate rows if they exist. INSERT INTO insert into lets you create multiple tables in the same query that you can use to create a UNION or LEFT JOIN. INSERT INTO table_name SELECT * FROM ` source_name ` ; The ; is needed to mark where the table end. When using the table you created with INSERT INTO you use the not the ex. LEFT JOIN table_name ON table_name .id = XXX.id LEFT JOIN LEFT JOIN lets you append more columns to an existing table firstSeen() firstseen( ) saves only the first encountered row for coalese toFloat() unixTimestamp() split() slice() etc... Back to top Query solutions Connect historic and new data that has overlapping transactions, items and users. classDiagram email_model --* messages_transactions email_model --* messages_users email_model --* messages_campaigns create a custom user.agg. the datamodel creates aggregate functions such as user.agg.revenue. to create one yourself do the following. In the below example I create user.agg.margin similar to user.agg.revenue --aggregates margins per user same as user.agg.revenue but with margin INSERT INTO margin SELECT user AS user, concat('',SUM(margin)) AS total_margin FROM `s3 - transactions`; SELECT UI.user AS user, margin.total_margin AS total_margin, UI.other fields... FROM `user_import` AS UI LEFT JOIN margin ON margin.user = UI.user Note that you need to add concat('',) to the sum expression. this is because you cant LEFT JOIN a float. concat('',) converts it into a string. concat('',SUM(margin)) AS total_margin Standard Queries Back to top Centra Queries Procedure 1 Interactions 1 Items 2 Users 3 Back to top Procedure Setup config Make arbitrary query toward centra This will trigger proxy sync, the .gz files will appear once completed, duration 1-5h Back to top Interactions Id columns: id i import / user,id i model source SELECT `line.Id` AS id, `order.Customer.Id` AS user, unixTimestamp(`order.OrderDate`, '2006-01-02T15:04:05-0700') AS ts, concat(`line.ProductVariant.Id`,'_',`line.ProductSize.Size.Id`) AS item, toFloat(`line.LineValue.FormattedValue`)*toFloat(`order.CurrencyBaseRate`) AS revenue, round(`line.Quantity`*`order.CurrencyBaseRate`*`line.UnitOriginalPrice.FormattedValue`,2) AS full_price, `line.ProductVariant.Id` AS variant_id, `line.ProductVariant.Product.Id` AS product_id, `line.ProductVariant.VariantNumber` AS variant_number, `line.ProductSize.Id` AS product_size, `line.ProductSize.SKU` AS size_sku, `line.ProductSize.SizeNumber` AS size_number, `line.ProductSize.GTIN` AS size_gtin, `line.ProductSize.Size.Id` AS size_id, `line.ProductSize.Size.Name` AS size_name, toFloat(`line.LineValue.FormattedValue`) AS Non_converted_value, `line.UnitPrice.FormattedValue` AS Unitprice_formatted_value, `line.UnitOriginalPrice.FormattedValue` AS Unit_original_price_formatted_value, `line.Quantity` AS quantity, `line.ReturnedQuantity` AS returned_quantity, `line.CancelledQuantity` AS cancelled_quantity, `line.ProductNumber` AS product_number, `line.TypeName` AS type, round(`line.DiscountPercent`,0) AS discount_percent, `line.TaxPercent` AS tax_percent, `order.Id` AS order_id, `order.Number` AS order_number, unixTimestamp(`order.CreatedAt`, '2006-01-02T15:04:05-0700') AS order_created_at, `order.Status` AS order_status, `order.GrandTotal.FormattedValue` AS total order value inc VAT, `order.Shipments[0].CarrierInformation.ServiceName` AS carrier_service_name, `order.Shipments[0].CarrierInformation.CarrierName` AS carrier_name, `order.Market.Name` AS order_market, `order.Store.Name` AS store, `order.Country.Name` AS country, `order.PaymentMethod.Name` AS order_payment_method, `order.Totals.LineValues` AS order_totals_values, `order.Totals.Shipping` AS order_total_shipping, `order.Totals.Discounts` AS order_total_discounts, `order.Totals.Handling` AS order_totals_handling, `order.CurrencyBaseRate` AS order_currency_base_rate, `order.Discounts` AS order_discounts, `order.Discounts.Len` AS order_discounts_len, `order.DiscountsApplied.Name` AS discount_name, `order.DiscountsApplied.Method` AS order_discounts_applied_method, `order.DiscountsApplied.Value` AS order_discounts_applied_value, `order.DiscountsApplied.Discount.Codes` discount_codes, Currency AS currency, CurrencyOK AS currency_ok FROM`interactions.gz` Back to top Items Id columns : item SELECT concat(`variant.Id`,'_',`variant.productSize.Size.Id`) AS item, `prod.Name` AS prod_name, `variant.MediaURL` AS variant_media_url, `variant.Id` AS id, `variant.Name` AS variant_name, `variant.Status` AS variant_status, `variant.StockOffset` AS variant_stock_offset, `variant.InternalName` AS variant_internal_name, `variant.variantNumber` AS variant_variant_number, `variant.UnitCost.FormattedValue` AS variant_unit_cost_formatted_value, `variant.productSize.Id` AS variant_product_size_id, `variant.productSize.GTIN` AS variant_product_size_gtin, `variant.productSize.SizeNumber` AS variant_product_size_size_number, `variant.productSize.SKU` AS variant_product_size_sku, `variant.productSize.Size.Id` AS variant_product_size_size_id, `variant.productSize.Size.Name` AS variant_product_size_size_name, `prod.Id` AS prod_id, `prod.ProductNumber` AS prod_product_number, `prod.Brand.Name` AS prod_brand_name, `prod.CountryOfOrigin.Name` AS prod_country_of_origin_name, `prod.Collection.Name` AS prod_collection_name, `prod.Status` AS prod_status, `prod.HarmonizedCommodityCode` AS prod_harmonized_commodity_code, `prod.Folder.Name` AS prod_folder_name, `display.Store.Name` AS display_store_name, `display.Status` AS display_status, `display.Name` AS display_name, `display.DisplayItem.Id` AS display_display_item_id, `display.Categories` AS display_categories, `display.Category1` AS display_category_1, `display.Category2` AS display_category_2, `display.Category3` AS display_category_3, `display.CategoryUri` AS display_category_uri, `display.Uri` AS display_uri, `variant.productSize.Size.AvailableNowQuantity` AS variant_product_size_size_available_now_quantity, `variant.Price` AS variant_price, `variant.Currency` AS variant_currency, `variant.Campaign_DiscountPercent` AS variant_campaign_discount_percent, `variant.Campaign_FixedPrice` AS variant_campaign_fixed_price, `variant.Campaign_FixedPrice_Currency` AS variant_campaign_fixed_price_currency, market AS market, concat(`prod.Brand.Name`, ', ', `prod.Name`, if(`variant.Name` != '' OR `variant.productSize.Size.Name` != '', ' ', ''), if(`variant.Name` != '', concat('[',`variant.Name`, ']'),''), if(`variant.productSize.Size.Name` != '', concat('[',`variant.productSize.Size.Name`,']'), '') ) format FROM `items.gz` Back to top Users Id columns : user SELECT `customer.Id` AS user, `customer.IsAnonymized` AS anonymized, `customer.TotalOrders` AS total_orders, unixTimestamp(`customer.CreatedAt`, '2006-01-02T15:04:05-0700') AS created_at, unixTimestamp(`customer.UpdatedAt`, '2006-01-02T15:04:05-0700') AS updated_at, `customer.Store.Name` AS store, `customer.Email` AS email, `customer.CellPhoneNumber` AS phone FROM `users.gz` Back to top No size model for Item source called \u2018no size model - items\u2019 SELECT variantId AS id, groupcoalesce(format) AS format, groupcoalesce(productName) AS product_name, groupcoalesce(variantName) AS variant_name, groupcoalesce(variantStatus) AS variant_status, groupcoalesce(brand) AS brand, groupcoalesce(`prod.Folder.Name`) AS prod_folder_name, groupcoalesce(collection) AS collection, groupcoalesce(productNumber) AS product_number, groupcoalesce(price) AS price, groupcoalesce(availableNowQuantity) AS available_now_quantity, groupcoalesce(countryOfOrigin) AS country_of_origin, groupcoalesce(mediaURL) AS media_url, groupcoalesce(unitCost) AS unit_cost, groupcoalesce(productStatus) AS product_status, groupcoalesce(variantInternalName) AS variant_internal_name, groupcoalesce(displayCategory1) AS display_category_1, groupcoalesce(displayCategory2) AS display_category_2, groupcoalesce(displayCategory3) AS display_category_3, groupcoalesce(displayItemId) AS display_item_id FROM `centra_products_import` GROUP BY variantId Back to top Example rows with explanation Coalesce ( display.Name , prod.Name , variant.Id ) AS format Explanation: Choose display.Name if it exists, otherwise check prod.Name, and lastly variant.Id. Concat ( line.ProductVariant.Id ,' ', line.ProductSize.Size.Id ) AS item Explanation: This will merge the two lines, for example Concat (Hello, ' ', you) would concat to Hello_you unixTimestamp ( order.CreatedAt , '2006-01-02T15:04:05-0700') AS order_created_at, Explanation: This will convert a date into number form Back to top Voyado Queries Procedure 1 Items 2 Users 3 Interactions 4 Back to top Procedure Setup config Back to top Interactions SELECT * FROM `items.gz` Back to top Items SELECT * FROM `items.gz` Back to top Users SELECT * FROM `items.gz` Back to top Google Feed Query Back to top Procedure Get the link to the customer's Google feed (link to a .xml file), this is something most customers can easily supply upon request. Usually, there are multiple feeds to cover all different markets. The link to a specific market is a URL like https://some.domain/api/feed/google_se/SOMEKEY Back to top Import Query SELECT * FROM `url:GOOGLE_FEED_LINK` Back to top Preprocess Directives In the Preprocessor Directives field, set the xml properties as follows. There may be other useful field to include in the pluck line as well. decoder=xml root=rss.channel rowTag=item pluck=id,title,image_link,availability,price,sale_price,google_product_category,product_type,brand Note: Stray Ampersands are currently not accepted, but Google handles these. If you get errors with this, you can read feeds with non-escaped ampersands using this as the first line in the preprocessor: preprocess=[[ replace , , ]] Back to top","title":"Sources"},{"location":"Platform/Menu/Manage Data/Sources/#table-of-contents","text":"Create sources Frontpage columns Name id Cnf Version Count Tags Drivers Sync Dependencies Updated At Synced At Top Menu Delete Tag Migrate Truncate Sync Enable Disable Create Source settigs Name Id columns RunEvery Comment Merge filter Overview Query Database connection Load saved query Preprocessor directives Query expressions create a custom source UNION Standard Queries Centra Queries Procedure Interactions Items Users No size model Example rows with explanation Voyado Queries Procedure Interactions Items Users Google Feed Query Procedure Import Query Preprocess Directives Back to top","title":"Table of Contents"},{"location":"Platform/Menu/Manage Data/Sources/#create-sources","text":"When the data is imported , go to Manage Data - Sources and create a new source by clicking the purple plus sign as seen in the below image. Name the source import_[source of data]_[type of data] where [source of data] specifies where the data comes from (centra, voyado, etc), and the [type of data] specifies the data type (items, users, interactions, etc). Choose an identifier for the source using the Id columns field. If the source you\u2019re creating is for: interactions : we want to identify each interaction through a user, an item and the time of the purchase, therefore choose user,ts,item under id columns and then press create. items : we want to identify each item by using an item id (often sku or variant). users : we want to identify each user by using a user id. The fields Comment and Merge Filter can be left empty, and you can press CREATE . Choose database connection and create a QUERY If it\u2019s a centra/voyado customer choose that option, if the files were uploaded manually, choose imports. You can now see the query stage, as standard \u201cSELECT * FROM `*`\u201d will show, if you press \u201cEXECUTE PREVIEW SUMMARY\u201d you will see all the imported files you can choose to gather data from. Copy the filename you want to use and enter that name in the query above, like SELECT * FROM [ENTER FILENAME HERE] . Copy the queries (depending on what system the customer has) from here: Centra queries Voyado queries The import file is now done, press sync and save to exit. Now repeat the \"Create source\"-step 2 but name the file model_[source of data]_[type of data] (the use same identifier as in the import file). In the Choose database connection now choose source instead, and press execute preview summary , now choose the import source file and edit the query to select from that, like \" SELECT * FROM ENTER_SOURCENAME_HERE \" and then press Save and sync . Back to top","title":"Create sources"},{"location":"Platform/Menu/Manage Data/Sources/#frontpage-columns","text":"Back to top","title":"Frontpage columns"},{"location":"Platform/Menu/Manage Data/Sources/#name","text":"Name of source Back to top","title":"Name"},{"location":"Platform/Menu/Manage Data/Sources/#id","text":"every source has an unique id wich is used to show dependencies between sources. Back to top","title":"id"},{"location":"Platform/Menu/Manage Data/Sources/#cnf-version","text":"Back to top","title":"Cnf Version"},{"location":"Platform/Menu/Manage Data/Sources/#count","text":"Count describes how many rows the source have. There can only be 1 row for every unique key column. if there are multiple rows with the same key all but 1 is removed. Back to top","title":"Count"},{"location":"Platform/Menu/Manage Data/Sources/#tags","text":"you can tag a source to keep track of how it is used. Back to top","title":"Tags"},{"location":"Platform/Menu/Manage Data/Sources/#drivers","text":"The drivers show whatdriver is used and also if it is active (green) or inactive (red). If a source has multiple queries there will be multiple drivers, here you can see wich source is active and wich are not. Back to top","title":"Drivers"},{"location":"Platform/Menu/Manage Data/Sources/#sync","text":"You can set a daily sync for the source, for example DailyAt:6 . Back to top","title":"Sync"},{"location":"Platform/Menu/Manage Data/Sources/#dependencies","text":"Dependencies for a source show what other sources the are used to build up the source. an example for this is SELECT * FROM Source1 LEFT JOIN Source2 on Source2.id = Source1.id UNION SELECT * FROM Source3 This will show the id for source 1,2,3 in the Dependencies for the new source. Back to top","title":"Dependencies"},{"location":"Platform/Menu/Manage Data/Sources/#updated-at","text":"Shows how long ago the source was last modified. Back to top","title":"Updated At"},{"location":"Platform/Menu/Manage Data/Sources/#synced-at","text":"Shows how long ago the source was last synced. Back to top","title":"Synced At"},{"location":"Platform/Menu/Manage Data/Sources/#top-menu","text":"Back to top","title":"Top Menu"},{"location":"Platform/Menu/Manage Data/Sources/#delete","text":"Back to top","title":"Delete"},{"location":"Platform/Menu/Manage Data/Sources/#tag","text":"Select a source, click Tag and write a new tag or select an old tag. Back to top","title":"Tag"},{"location":"Platform/Menu/Manage Data/Sources/#migrate","text":"Back to top","title":"Migrate"},{"location":"Platform/Menu/Manage Data/Sources/#truncate","text":"Trucate wipes the source of all data. This is usefull if you have changed key column for example because if you just sync the data the old data is not removed. [Note that some sources only read 1 week data at the time to save time, if you truc a source like this all historic data is removed wich is bad] Back to top","title":"Truncate"},{"location":"Platform/Menu/Manage Data/Sources/#sync_1","text":"Manually syncs the source. Back to top","title":"Sync"},{"location":"Platform/Menu/Manage Data/Sources/#enable","text":"doesnt work Back to top","title":"Enable"},{"location":"Platform/Menu/Manage Data/Sources/#disable","text":"doesnt work Back to top","title":"Disable"},{"location":"Platform/Menu/Manage Data/Sources/#create","text":"Creates a new source. Back to top","title":"Create"},{"location":"Platform/Menu/Manage Data/Sources/#source-settigs","text":"Back to top","title":"Source settigs"},{"location":"Platform/Menu/Manage Data/Sources/#name_1","text":"Just a name Back to top","title":"Name"},{"location":"Platform/Menu/Manage Data/Sources/#id-columns","text":"The Id columns has to be choosen to be unique. if the id is not unique (the same id for many rows) only 1 row will be saved and all others are removed. For the interaction table the id has to contain user AND id or ts,item. The reason user has to be an id column is because when user is the first id column all interactions are sorted on user first. this lets you use expressions such as agg.i wich count number of interactions a user has made. if the interaction table is not sorted on user first the aggregation functions doesnt work. For multiple id columns they are sorted in the order they are written. User,ts,item is sorted first on user, then on ts and lastly on item. SELECT CUSTOM COLUMNS is usefull if you want other names than the predefined such as SKU. Back to top","title":"Id columns"},{"location":"Platform/Menu/Manage Data/Sources/#runevery","text":"Set a sync Back to top","title":"RunEvery"},{"location":"Platform/Menu/Manage Data/Sources/#comment","text":"Back to top","title":"Comment"},{"location":"Platform/Menu/Manage Data/Sources/#merge-filter","text":"lets you filter out your query before you save it. A Merge filter discards everything that is not true before saving the table. For example if you add a query similar to toFloat(ts) now()-100*24*3600 , then all timestamp (ts) data from later than 100 days will be discarded. Back to top","title":"Merge filter"},{"location":"Platform/Menu/Manage Data/Sources/#overview","text":"Shows what is in the source currently Back to top","title":"Overview"},{"location":"Platform/Menu/Manage Data/Sources/#query","text":"Back to top","title":"Query"},{"location":"Platform/Menu/Manage Data/Sources/#database-connection","text":"Back to top","title":"Database connection"},{"location":"Platform/Menu/Manage Data/Sources/#load-saved-query","text":"lets you reload previously run queries Back to top","title":"Load saved query"},{"location":"Platform/Menu/Manage Data/Sources/#preprocessor-directives","text":"when importing data from a link such as product feed you need to add preprocessor directives to know how to read the file. SELECT * FROM `url:https://files.channable.com/o2lQPJiYXk7KrY1DW2BJ3A==.xml` [Note that you have to write url: before https://] start by writing decoder=xml to show the file structure, in this case it looks like this. decoder: describes what file format, xml, csv, json etc. root: navigates the file and shows where you want to read data. rowtag: selects the object. pluck: inside your rowtag you can have multiple data columns, pluck lets you choose wich you want to get. Below is one example with root=feed.channel and one example with root=rss.channel : In the first image example, the resulting preprocessing directives to fetch the feed are: decoder=xml root=rss.channel rowtag=item pluck=google_product_category,price resulting in this outcome Back to top","title":"Preprocessor directives"},{"location":"Platform/Menu/Manage Data/Sources/#query-expressions","text":"you need to enclose variable names that contain other characters than letters and numbers with backticks , this includes whitespace ' ', dot '.', etc... Back to top","title":"Query expressions"},{"location":"Platform/Menu/Manage Data/Sources/#create-a-custom-source","text":"SELECT * FROM raw: id,item 1,item1 2,item2 this returns a table. Back to top","title":"create a custom source"},{"location":"Platform/Menu/Manage Data/Sources/#union","text":"A UNION merges two data sources by including all unique rows from both. When making a union the columns need to have the same name and be in the same order SELECT * FROM `table 1` UNION SELECT * FROM `table 2` if you have overlapping id rows in table 1 and table 2 the id in table 1 will be saved and table 2 will be discared. ex. to try this, create a test source select incr(1,50) AS id, 'table 1' AS item from ` RANDOM_SOURCE ` UNION select incr(1,1) AS id, 'table 2' AS item from ` RANDOM_SOURCE ` then create a new source SELECT * FROM ` TEST_SOURCE ` this will show that all overlapping ids will have item from table 1 . A UNION can also be suffixed by ALL, where UNION ALL will not discard duplicates, meaning much faster execution but leaves duplicate rows if they exist.","title":"UNION"},{"location":"Platform/Menu/Manage Data/Sources/#insert-into","text":"insert into lets you create multiple tables in the same query that you can use to create a UNION or LEFT JOIN. INSERT INTO table_name SELECT * FROM ` source_name ` ; The ; is needed to mark where the table end. When using the table you created with INSERT INTO you use the not the ex. LEFT JOIN table_name ON table_name .id = XXX.id","title":"INSERT INTO"},{"location":"Platform/Menu/Manage Data/Sources/#left-join","text":"LEFT JOIN lets you append more columns to an existing table","title":"LEFT JOIN"},{"location":"Platform/Menu/Manage Data/Sources/#firstseen","text":"firstseen( ) saves only the first encountered row for coalese toFloat() unixTimestamp() split() slice() etc... Back to top","title":"firstSeen()"},{"location":"Platform/Menu/Manage Data/Sources/#query-solutions","text":"","title":"Query solutions"},{"location":"Platform/Menu/Manage Data/Sources/#connect-historic-and-new-data-that-has-overlapping-transactions-items-and-users","text":"classDiagram email_model --* messages_transactions email_model --* messages_users email_model --* messages_campaigns","title":"Connect historic and new data that has overlapping transactions, items and users."},{"location":"Platform/Menu/Manage Data/Sources/#create-a-custom-useragg","text":"the datamodel creates aggregate functions such as user.agg.revenue. to create one yourself do the following. In the below example I create user.agg.margin similar to user.agg.revenue --aggregates margins per user same as user.agg.revenue but with margin INSERT INTO margin SELECT user AS user, concat('',SUM(margin)) AS total_margin FROM `s3 - transactions`; SELECT UI.user AS user, margin.total_margin AS total_margin, UI.other fields... FROM `user_import` AS UI LEFT JOIN margin ON margin.user = UI.user Note that you need to add concat('',) to the sum expression. this is because you cant LEFT JOIN a float. concat('',) converts it into a string. concat('',SUM(margin)) AS total_margin","title":"create a custom user.agg."},{"location":"Platform/Menu/Manage Data/Sources/#standard-queries","text":"Back to top","title":"Standard Queries"},{"location":"Platform/Menu/Manage Data/Sources/#centra-queries","text":"Procedure 1 Interactions 1 Items 2 Users 3 Back to top","title":"Centra Queries"},{"location":"Platform/Menu/Manage Data/Sources/#procedure","text":"Setup config Make arbitrary query toward centra This will trigger proxy sync, the .gz files will appear once completed, duration 1-5h Back to top","title":"Procedure"},{"location":"Platform/Menu/Manage Data/Sources/#interactions","text":"Id columns: id i import / user,id i model source SELECT `line.Id` AS id, `order.Customer.Id` AS user, unixTimestamp(`order.OrderDate`, '2006-01-02T15:04:05-0700') AS ts, concat(`line.ProductVariant.Id`,'_',`line.ProductSize.Size.Id`) AS item, toFloat(`line.LineValue.FormattedValue`)*toFloat(`order.CurrencyBaseRate`) AS revenue, round(`line.Quantity`*`order.CurrencyBaseRate`*`line.UnitOriginalPrice.FormattedValue`,2) AS full_price, `line.ProductVariant.Id` AS variant_id, `line.ProductVariant.Product.Id` AS product_id, `line.ProductVariant.VariantNumber` AS variant_number, `line.ProductSize.Id` AS product_size, `line.ProductSize.SKU` AS size_sku, `line.ProductSize.SizeNumber` AS size_number, `line.ProductSize.GTIN` AS size_gtin, `line.ProductSize.Size.Id` AS size_id, `line.ProductSize.Size.Name` AS size_name, toFloat(`line.LineValue.FormattedValue`) AS Non_converted_value, `line.UnitPrice.FormattedValue` AS Unitprice_formatted_value, `line.UnitOriginalPrice.FormattedValue` AS Unit_original_price_formatted_value, `line.Quantity` AS quantity, `line.ReturnedQuantity` AS returned_quantity, `line.CancelledQuantity` AS cancelled_quantity, `line.ProductNumber` AS product_number, `line.TypeName` AS type, round(`line.DiscountPercent`,0) AS discount_percent, `line.TaxPercent` AS tax_percent, `order.Id` AS order_id, `order.Number` AS order_number, unixTimestamp(`order.CreatedAt`, '2006-01-02T15:04:05-0700') AS order_created_at, `order.Status` AS order_status, `order.GrandTotal.FormattedValue` AS total order value inc VAT, `order.Shipments[0].CarrierInformation.ServiceName` AS carrier_service_name, `order.Shipments[0].CarrierInformation.CarrierName` AS carrier_name, `order.Market.Name` AS order_market, `order.Store.Name` AS store, `order.Country.Name` AS country, `order.PaymentMethod.Name` AS order_payment_method, `order.Totals.LineValues` AS order_totals_values, `order.Totals.Shipping` AS order_total_shipping, `order.Totals.Discounts` AS order_total_discounts, `order.Totals.Handling` AS order_totals_handling, `order.CurrencyBaseRate` AS order_currency_base_rate, `order.Discounts` AS order_discounts, `order.Discounts.Len` AS order_discounts_len, `order.DiscountsApplied.Name` AS discount_name, `order.DiscountsApplied.Method` AS order_discounts_applied_method, `order.DiscountsApplied.Value` AS order_discounts_applied_value, `order.DiscountsApplied.Discount.Codes` discount_codes, Currency AS currency, CurrencyOK AS currency_ok FROM`interactions.gz` Back to top","title":"Interactions"},{"location":"Platform/Menu/Manage Data/Sources/#items","text":"Id columns : item SELECT concat(`variant.Id`,'_',`variant.productSize.Size.Id`) AS item, `prod.Name` AS prod_name, `variant.MediaURL` AS variant_media_url, `variant.Id` AS id, `variant.Name` AS variant_name, `variant.Status` AS variant_status, `variant.StockOffset` AS variant_stock_offset, `variant.InternalName` AS variant_internal_name, `variant.variantNumber` AS variant_variant_number, `variant.UnitCost.FormattedValue` AS variant_unit_cost_formatted_value, `variant.productSize.Id` AS variant_product_size_id, `variant.productSize.GTIN` AS variant_product_size_gtin, `variant.productSize.SizeNumber` AS variant_product_size_size_number, `variant.productSize.SKU` AS variant_product_size_sku, `variant.productSize.Size.Id` AS variant_product_size_size_id, `variant.productSize.Size.Name` AS variant_product_size_size_name, `prod.Id` AS prod_id, `prod.ProductNumber` AS prod_product_number, `prod.Brand.Name` AS prod_brand_name, `prod.CountryOfOrigin.Name` AS prod_country_of_origin_name, `prod.Collection.Name` AS prod_collection_name, `prod.Status` AS prod_status, `prod.HarmonizedCommodityCode` AS prod_harmonized_commodity_code, `prod.Folder.Name` AS prod_folder_name, `display.Store.Name` AS display_store_name, `display.Status` AS display_status, `display.Name` AS display_name, `display.DisplayItem.Id` AS display_display_item_id, `display.Categories` AS display_categories, `display.Category1` AS display_category_1, `display.Category2` AS display_category_2, `display.Category3` AS display_category_3, `display.CategoryUri` AS display_category_uri, `display.Uri` AS display_uri, `variant.productSize.Size.AvailableNowQuantity` AS variant_product_size_size_available_now_quantity, `variant.Price` AS variant_price, `variant.Currency` AS variant_currency, `variant.Campaign_DiscountPercent` AS variant_campaign_discount_percent, `variant.Campaign_FixedPrice` AS variant_campaign_fixed_price, `variant.Campaign_FixedPrice_Currency` AS variant_campaign_fixed_price_currency, market AS market, concat(`prod.Brand.Name`, ', ', `prod.Name`, if(`variant.Name` != '' OR `variant.productSize.Size.Name` != '', ' ', ''), if(`variant.Name` != '', concat('[',`variant.Name`, ']'),''), if(`variant.productSize.Size.Name` != '', concat('[',`variant.productSize.Size.Name`,']'), '') ) format FROM `items.gz` Back to top","title":"Items"},{"location":"Platform/Menu/Manage Data/Sources/#users","text":"Id columns : user SELECT `customer.Id` AS user, `customer.IsAnonymized` AS anonymized, `customer.TotalOrders` AS total_orders, unixTimestamp(`customer.CreatedAt`, '2006-01-02T15:04:05-0700') AS created_at, unixTimestamp(`customer.UpdatedAt`, '2006-01-02T15:04:05-0700') AS updated_at, `customer.Store.Name` AS store, `customer.Email` AS email, `customer.CellPhoneNumber` AS phone FROM `users.gz` Back to top","title":"Users"},{"location":"Platform/Menu/Manage Data/Sources/#no-size-model","text":"for Item source called \u2018no size model - items\u2019 SELECT variantId AS id, groupcoalesce(format) AS format, groupcoalesce(productName) AS product_name, groupcoalesce(variantName) AS variant_name, groupcoalesce(variantStatus) AS variant_status, groupcoalesce(brand) AS brand, groupcoalesce(`prod.Folder.Name`) AS prod_folder_name, groupcoalesce(collection) AS collection, groupcoalesce(productNumber) AS product_number, groupcoalesce(price) AS price, groupcoalesce(availableNowQuantity) AS available_now_quantity, groupcoalesce(countryOfOrigin) AS country_of_origin, groupcoalesce(mediaURL) AS media_url, groupcoalesce(unitCost) AS unit_cost, groupcoalesce(productStatus) AS product_status, groupcoalesce(variantInternalName) AS variant_internal_name, groupcoalesce(displayCategory1) AS display_category_1, groupcoalesce(displayCategory2) AS display_category_2, groupcoalesce(displayCategory3) AS display_category_3, groupcoalesce(displayItemId) AS display_item_id FROM `centra_products_import` GROUP BY variantId Back to top","title":"No size model"},{"location":"Platform/Menu/Manage Data/Sources/#example-rows-with-explanation","text":"Coalesce ( display.Name , prod.Name , variant.Id ) AS format Explanation: Choose display.Name if it exists, otherwise check prod.Name, and lastly variant.Id. Concat ( line.ProductVariant.Id ,' ', line.ProductSize.Size.Id ) AS item Explanation: This will merge the two lines, for example Concat (Hello, ' ', you) would concat to Hello_you unixTimestamp ( order.CreatedAt , '2006-01-02T15:04:05-0700') AS order_created_at, Explanation: This will convert a date into number form Back to top","title":"Example rows with explanation"},{"location":"Platform/Menu/Manage Data/Sources/#voyado-queries","text":"Procedure 1 Items 2 Users 3 Interactions 4 Back to top","title":"Voyado Queries"},{"location":"Platform/Menu/Manage Data/Sources/#procedure_1","text":"Setup config Back to top","title":"Procedure"},{"location":"Platform/Menu/Manage Data/Sources/#interactions_1","text":"SELECT * FROM `items.gz` Back to top","title":"Interactions"},{"location":"Platform/Menu/Manage Data/Sources/#items_1","text":"SELECT * FROM `items.gz` Back to top","title":"Items"},{"location":"Platform/Menu/Manage Data/Sources/#users_1","text":"SELECT * FROM `items.gz` Back to top","title":"Users"},{"location":"Platform/Menu/Manage Data/Sources/#google-feed-query","text":"Back to top","title":"Google Feed Query"},{"location":"Platform/Menu/Manage Data/Sources/#procedure_2","text":"Get the link to the customer's Google feed (link to a .xml file), this is something most customers can easily supply upon request. Usually, there are multiple feeds to cover all different markets. The link to a specific market is a URL like https://some.domain/api/feed/google_se/SOMEKEY Back to top","title":"Procedure"},{"location":"Platform/Menu/Manage Data/Sources/#import-query","text":"SELECT * FROM `url:GOOGLE_FEED_LINK` Back to top","title":"Import Query"},{"location":"Platform/Menu/Manage Data/Sources/#preprocess-directives","text":"In the Preprocessor Directives field, set the xml properties as follows. There may be other useful field to include in the pluck line as well. decoder=xml root=rss.channel rowTag=item pluck=id,title,image_link,availability,price,sale_price,google_product_category,product_type,brand Note: Stray Ampersands are currently not accepted, but Google handles these. If you get errors with this, you can read feeds with non-escaped ampersands using this as the first line in the preprocessor: preprocess=[[ replace , , ]] Back to top","title":"Preprocess Directives"},{"location":"Platform/Menu/Model/Interactions/","text":"Interactions","title":"Interactions"},{"location":"Platform/Menu/Model/Interactions/#interactions","text":"","title":"Interactions"},{"location":"Platform/Menu/Model/Overview/","text":"Overview","title":"Overview"},{"location":"Platform/Menu/Model/Overview/#overview","text":"","title":"Overview"},{"location":"Platform/Menu/Model/Products/","text":"Products","title":"Products"},{"location":"Platform/Menu/Model/Products/#products","text":"","title":"Products"},{"location":"Platform/Menu/Model/Users/","text":"Users","title":"Users"},{"location":"Platform/Menu/Model/Users/#users","text":"","title":"Users"},{"location":"Platform/Menu/Other/Overlaps/","text":"Overlaps","title":"Other"},{"location":"Platform/Menu/Other/Overlaps/#overlaps","text":"","title":"Overlaps"},{"location":"Platform/Recommendations/Recommendations/","text":"Table of Contents Recommendations UI Settings Search Columns Filter expression Boost expression InteractionFilter Trend Limit Max orders Max interactions Allow items from history shuffled Advanced API Add field limit Save as new profile Save profile Delete profile Front page Search for items Profile Refresh Clear user and items Bench Add random item Add random user Recommendation output Data available in recommendations ml meta ml filter Recommendations in emails Introduction Partners Voyado Recommendation profiles Infobaleen rekommendationsbibliotek Olika rekommendationer Standard rekommendation: Standard Liknande produkter rekommendation: Similar Inspiration rekommendation: Inspiration Win-back rekommendation: Win-back Check-out rekommendation: Check-out Tack f\u00f6r senast order rekommendation: Last purchase Produkter p\u00e5 rea rekommendationer: On sale Back to top Recommendations UI Back to top Settings Back to top Search Back to top Columns Back to top Filter expression Write an expression that returns a boolean result. True = not filtered False = filtered. example. price 100 this returns True for all products with a price larger than 100 thus removing all items with a price lower than 100. Back to top Boost expression Back to top InteractionFilter Back to top Trend Trend limits the time intervall wich the recomendations are based on. Max trend uses a short timeintervall resulting in the ML model only recomends products that are trending last few weeks. Back to top Limit Limit decides how many recomended items are returned. limit 4 = 4 recommended items. Limit 12 = 12 recommended items. Back to top Max orders Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account. Back to top Max interactions Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account. Back to top Allow items from history sets a filter so that all items the user have bought cannot be recommended. Back to top shuffled If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled. Back to top Advanced Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. Example below where boughtArticleGroup returns a comma seperated string 'item1,item2,item3,item4' . to convert this into a filter hasany(split(basketArticleGroup,','),makearray('Thin Case')) example of advanced query. { Context :[{ Name : boughtArticleGroup , Field : prod_collection_name , Option : all }, { Name : basketArticleGroup , Field : prod_collection_name , Option : items }]} Examples Advanced: { Context :[{ Name : bought_phone_model , Field : phone_model , Option : all }]} Filter expression: hasAny(split(bought_phone_model, , ),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example: Back to top API Back to top Add field limit Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category. Back to top Save as new profile Saves the current configuration as a profile new Back to top Save profile Overrides the current profile with the current configuration. Back to top Delete profile Delets selected profile. Back to top Front page Back to top Search for items I THINK items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup . Back to top Profile saved profiles Back to top Refresh Back to top Clear user and items removes selected items and user Back to top Bench Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower). Back to top Add random item same as search for items but adds a random item. Back to top Add random user Selects a random user and shows what items this user has previously bought and the returned recommended items based on this. Back to top Recommendation output The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive: Back to top Data available in recommendations Back to top ml meta To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields. Back to top ml filter To write filter expressions based on fields you have to activate ml filter for these fields Back to top Recommendations in emails Back to top Introduction We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user. Back to top Partners Here we specify how the process works between us and specified partners Back to top Voyado Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000, Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528 ,9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10, Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515 ,9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3, Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150 ,9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history. Back to top Recommendation profiles Back to top Infobaleen rekommendationsbibliotek 2022-03-24 Grundinst\u00e4llningar: Produkter i lager Vid tydliga k\u00f6nsrelaterade produkter: Se om man bara ska rekommendera produtker med samma gender \u2026 Back to top Olika rekommendationer Back to top Standard rekommendation: Standard Rekommendera det mest sannolika n\u00e4sta k\u00f6pet (medium trend) Syfte: H\u00f6g sannolik att konvertera Expression: Trend: Back to top Liknande produkter rekommendation: Similar Rekommendera produkter ur samma kategori Syfte: H\u00f6g igenk\u00e4nningsfaktor Expression: Trend: Back to top Inspiration rekommendation: Inspiration Rekommendera produkter inom kategorier kunden ej handlat inom tidigare / vald produkt Syfte: Inspirera till k\u00f6p i de mest relevanta kategorier man \u00e4nnu ej handlat inom / produkten ej \u00e4r i Expression: Trend: Back to top Win-back rekommendation: Win-back Rekommendera mest sannolika produkter en kund kommer k\u00f6pa utifr\u00e5n historiskt k\u00f6pbeteende Syfte: Presenter de produkter en churnad kund har h\u00f6gst sannolikhet att k\u00f6pa Expression: Trend: Back to top Check-out rekommendation: Check-out Rekommendera billigare produkter utifr\u00e5n vad kunden lagt i sin varukorg Syfte: \u00d6ka AOV med en relevant produkt i det l\u00e4gre prissegmentet Expression: tofloat(Price) tofloat(last(basketArticlePrice))*0.8 Trend: Back to top Tack f\u00f6r senast order rekommendation: Last purchase Rekommendera mest sannolika produkter utifr\u00e5n kundens senaste order Syfte: \u00d6ka andelen kunder som g\u00f6r ett n\u00e4sta k\u00f6p Expression: Trend: Back to top Produkter p\u00e5 rea rekommendationer: On sale Rekommendera produkter som \u00e4r p\u00e5 rea Syfte: \u00d6ka rea fsg genom att visa relevanta produkter p\u00e5 rea. Expression: Trend: Back to top","title":"Recommendations"},{"location":"Platform/Recommendations/Recommendations/#table-of-contents","text":"Recommendations UI Settings Search Columns Filter expression Boost expression InteractionFilter Trend Limit Max orders Max interactions Allow items from history shuffled Advanced API Add field limit Save as new profile Save profile Delete profile Front page Search for items Profile Refresh Clear user and items Bench Add random item Add random user Recommendation output Data available in recommendations ml meta ml filter Recommendations in emails Introduction Partners Voyado Recommendation profiles Infobaleen rekommendationsbibliotek Olika rekommendationer Standard rekommendation: Standard Liknande produkter rekommendation: Similar Inspiration rekommendation: Inspiration Win-back rekommendation: Win-back Check-out rekommendation: Check-out Tack f\u00f6r senast order rekommendation: Last purchase Produkter p\u00e5 rea rekommendationer: On sale Back to top","title":"Table of Contents"},{"location":"Platform/Recommendations/Recommendations/#recommendations-ui","text":"Back to top","title":"Recommendations UI"},{"location":"Platform/Recommendations/Recommendations/#settings","text":"Back to top","title":"Settings"},{"location":"Platform/Recommendations/Recommendations/#search","text":"Back to top","title":"Search"},{"location":"Platform/Recommendations/Recommendations/#columns","text":"Back to top","title":"Columns"},{"location":"Platform/Recommendations/Recommendations/#filter-expression","text":"Write an expression that returns a boolean result. True = not filtered False = filtered. example. price 100 this returns True for all products with a price larger than 100 thus removing all items with a price lower than 100. Back to top","title":"Filter expression"},{"location":"Platform/Recommendations/Recommendations/#boost-expression","text":"Back to top","title":"Boost expression"},{"location":"Platform/Recommendations/Recommendations/#interactionfilter","text":"Back to top","title":"InteractionFilter"},{"location":"Platform/Recommendations/Recommendations/#trend","text":"Trend limits the time intervall wich the recomendations are based on. Max trend uses a short timeintervall resulting in the ML model only recomends products that are trending last few weeks. Back to top","title":"Trend"},{"location":"Platform/Recommendations/Recommendations/#limit","text":"Limit decides how many recomended items are returned. limit 4 = 4 recommended items. Limit 12 = 12 recommended items. Back to top","title":"Limit"},{"location":"Platform/Recommendations/Recommendations/#max-orders","text":"Number of orders that are taken into concideration when recommending products. Max orders = 1 means only the items included in the latest order are used as purchase history for that user. Max orders = 2 means the items in the two latest orders are taken into account. Back to top","title":"Max orders"},{"location":"Platform/Recommendations/Recommendations/#max-interactions","text":"Number of items that are taken into concideration when recommending products. Max items = 1 means only the latest purchased item is used as purchase history for that user. Max items = 2 means the two latest items are taken into account. Back to top","title":"Max interactions"},{"location":"Platform/Recommendations/Recommendations/#allow-items-from-history","text":"sets a filter so that all items the user have bought cannot be recommended. Back to top","title":"Allow items from history"},{"location":"Platform/Recommendations/Recommendations/#shuffled","text":"If Limit is set to 10 the items are recomended in order (most likly next purchase is at the top). by enabling shuffled it still recommends the top 10 items but the order of the top 10 items are shuffled. Back to top","title":"shuffled"},{"location":"Platform/Recommendations/Recommendations/#advanced","text":"Name: is the variable name. Field: the field wich you are taking data from Option: \"all\" means all items in the users purchase history. \"items\" means all items sent in through the API by the customer. When the customer makes an API call for the recommendation they can include items in the API call. for example items in the basket, the item you are currently looking at etc. Example below where boughtArticleGroup returns a comma seperated string 'item1,item2,item3,item4' . to convert this into a filter hasany(split(basketArticleGroup,','),makearray('Thin Case')) example of advanced query. { Context :[{ Name : boughtArticleGroup , Field : prod_collection_name , Option : all }, { Name : basketArticleGroup , Field : prod_collection_name , Option : items }]} Examples Advanced: { Context :[{ Name : bought_phone_model , Field : phone_model , Option : all }]} Filter expression: hasAny(split(bought_phone_model, , ),makeArray(phone_model)) split(bought_phone_model,\",\") returns an array of your purchase history (\"Field\":\"phone_model\"): ['bought_phone_model_1','bought_phone_model_2','bought_phone_model_3','bought_phone_model_4'] makeArray(phone_model) returns an array of all phone_model : ['phone_model_1','phone_model_2','phone_model_3','phone_model_n'] hasAny checks if elements in array 1 is contained in array 2 in this case the customers purchase history includes iPhone 12/Pro MagSafe and iPhone 12/Pro The expression hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) will thus return true for all pruducts where phone_model = iPhone 12/Pro MagSafe or iPhone 12/Pro and false for all other products. Thus only products with the same phone_model will be recommended. If you change the expression to hasAny(split(bought_phone_model,\",\"),makeArray(phone_model)) = FALSE everything will be inverted thus only recomending products where the phone_model != iPhone 12/Pro MagSafe or iPhone 12/Pro . [NOTE! when adding an item to in the Search for items you DO NOT add this item to your purchase history, these items are sent in from the API meaning they will only be affected by a filter expression if you use the option item instead of all ] See example: Back to top","title":"Advanced"},{"location":"Platform/Recommendations/Recommendations/#api","text":"Back to top","title":"API"},{"location":"Platform/Recommendations/Recommendations/#add-field-limit","text":"Field limit lets you set a filter on how many of each category should be recommended. This is usually used on product category where you only want to include ex. max 2 of each product category. Back to top","title":"Add field limit"},{"location":"Platform/Recommendations/Recommendations/#save-as-new-profile","text":"Saves the current configuration as a profile new Back to top","title":"Save as new profile"},{"location":"Platform/Recommendations/Recommendations/#save-profile","text":"Overrides the current profile with the current configuration. Back to top","title":"Save profile"},{"location":"Platform/Recommendations/Recommendations/#delete-profile","text":"Delets selected profile. Back to top","title":"Delete profile"},{"location":"Platform/Recommendations/Recommendations/#front-page","text":"Back to top","title":"Front page"},{"location":"Platform/Recommendations/Recommendations/#search-for-items","text":"I THINK items added in the search items window are counted as items given to the platform through the API call. This means they dont not affected by boughtArticleGroup but affects basketArticleGroup . Back to top","title":"Search for items"},{"location":"Platform/Recommendations/Recommendations/#profile","text":"saved profiles Back to top","title":"Profile"},{"location":"Platform/Recommendations/Recommendations/#refresh","text":"Back to top","title":"Refresh"},{"location":"Platform/Recommendations/Recommendations/#clear-user-and-items","text":"removes selected items and user Back to top","title":"Clear user and items"},{"location":"Platform/Recommendations/Recommendations/#bench","text":"Shows how fast the recommendation are returend when making an API call. (if your datamodel has MLFilter active for many fields the recommendations will be slower). Back to top","title":"Bench"},{"location":"Platform/Recommendations/Recommendations/#add-random-item","text":"same as search for items but adds a random item. Back to top","title":"Add random item"},{"location":"Platform/Recommendations/Recommendations/#add-random-user","text":"Selects a random user and shows what items this user has previously bought and the returned recommended items based on this. Back to top","title":"Add random user"},{"location":"Platform/Recommendations/Recommendations/#recommendation-output","text":"The output is what the API returns to the customer. All fields active in the Columns section are returnerd. if the image is active the output will only show the image and format. by disabling the image you can see all other fields that are returned. With image active: With image inactive: Back to top","title":"Recommendation output"},{"location":"Platform/Recommendations/Recommendations/#data-available-in-recommendations","text":"Back to top","title":"Data available in recommendations"},{"location":"Platform/Recommendations/Recommendations/#ml-meta","text":"To show an image and name on your recomendations you have to choose a format field and an image field under items AND activate the ml meta for these fields. Back to top","title":"ml meta"},{"location":"Platform/Recommendations/Recommendations/#ml-filter","text":"To write filter expressions based on fields you have to activate ml filter for these fields Back to top","title":"ml filter"},{"location":"Platform/Recommendations/Recommendations/#recommendations-in-emails","text":"Back to top","title":"Recommendations in emails"},{"location":"Platform/Recommendations/Recommendations/#introduction","text":"We can supply personalized recommendations in automated email flows. The technical integration varies between partners, but the main difference compared to segments is that we supply an individually customized set of products per user. Back to top","title":"Introduction"},{"location":"Platform/Recommendations/Recommendations/#partners","text":"Here we specify how the process works between us and specified partners Back to top","title":"Partners"},{"location":"Platform/Recommendations/Recommendations/#voyado","text":"Voyado has an ftp server to which we push a file of the form ContactId,Skus,ExpiryDate 00000000-0000-0000-0000-000000000000, Item692,Item165,Item835,Item166,Item836,Item838,Item277,Item504,Item332,Item218,Item608,Item528 ,9999-12-31T00:00:00.000+0000 0001394c-9e71-43d6-86f3-ada901fc4c10, Item218,Item411,Item135,Item504,Item692,Item202,Item1035,Item835,Item412,Item277,Item610,Item515 ,9999-12-31T00:00:00.000+0000 00021b19-db3d-4d26-84ce-ad56g0f028e3, Item165,Item702,Item701,Item146,Item166,Item835,Item1035,Item610,Item836,Item135,Item218,Item150 ,9999-12-31T00:00:00.000+0000 The list of Skus is generated from our recommendation engine for the user specified under ContactId , where the 0 line is the fallback recommendation. -- Insert how to setup Voyado Export here -- Once the recommendation flow is set up and an initial export has been sent, the recommendations can be previewed in Voyado. This is done by us selecting a few contactIds from the platform for them to check. Then the customer triggers a support ticket by sending an email to support@revide.se (revide is the old name, this may be updated) with the contactIds and requests checking the preview. Note: Historically there has been some issues due to contacts being labeled as \"Contact\" instead of \"Member\". This should be resolved as of April 2022, but to be safe, it could be a good idea to locate and include a user labeled \"Contact\" that has a purchase history. Back to top","title":"Voyado"},{"location":"Platform/Recommendations/Recommendations/#recommendation-profiles","text":"Back to top","title":"Recommendation profiles"},{"location":"Platform/Recommendations/Recommendations/#infobaleen-rekommendationsbibliotek","text":"2022-03-24 Grundinst\u00e4llningar: Produkter i lager Vid tydliga k\u00f6nsrelaterade produkter: Se om man bara ska rekommendera produtker med samma gender \u2026 Back to top","title":"Infobaleen rekommendationsbibliotek"},{"location":"Platform/Recommendations/Recommendations/#olika-rekommendationer","text":"Back to top","title":"Olika rekommendationer"},{"location":"Platform/Recommendations/Recommendations/#standard-rekommendation-standard","text":"Rekommendera det mest sannolika n\u00e4sta k\u00f6pet (medium trend) Syfte: H\u00f6g sannolik att konvertera Expression: Trend: Back to top","title":"Standard rekommendation: Standard"},{"location":"Platform/Recommendations/Recommendations/#liknande-produkter-rekommendation-similar","text":"Rekommendera produkter ur samma kategori Syfte: H\u00f6g igenk\u00e4nningsfaktor Expression: Trend: Back to top","title":"Liknande produkter rekommendation: Similar"},{"location":"Platform/Recommendations/Recommendations/#inspiration-rekommendation-inspiration","text":"Rekommendera produkter inom kategorier kunden ej handlat inom tidigare / vald produkt Syfte: Inspirera till k\u00f6p i de mest relevanta kategorier man \u00e4nnu ej handlat inom / produkten ej \u00e4r i Expression: Trend: Back to top","title":"Inspiration rekommendation: Inspiration"},{"location":"Platform/Recommendations/Recommendations/#win-back-rekommendation-win-back","text":"Rekommendera mest sannolika produkter en kund kommer k\u00f6pa utifr\u00e5n historiskt k\u00f6pbeteende Syfte: Presenter de produkter en churnad kund har h\u00f6gst sannolikhet att k\u00f6pa Expression: Trend: Back to top","title":"Win-back rekommendation: Win-back"},{"location":"Platform/Recommendations/Recommendations/#check-out-rekommendation-check-out","text":"Rekommendera billigare produkter utifr\u00e5n vad kunden lagt i sin varukorg Syfte: \u00d6ka AOV med en relevant produkt i det l\u00e4gre prissegmentet Expression: tofloat(Price) tofloat(last(basketArticlePrice))*0.8 Trend: Back to top","title":"Check-out rekommendation: Check-out"},{"location":"Platform/Recommendations/Recommendations/#tack-for-senast-order-rekommendation-last-purchase","text":"Rekommendera mest sannolika produkter utifr\u00e5n kundens senaste order Syfte: \u00d6ka andelen kunder som g\u00f6r ett n\u00e4sta k\u00f6p Expression: Trend: Back to top","title":"Tack f\u00f6r senast order rekommendation: Last purchase"},{"location":"Platform/Recommendations/Recommendations/#produkter-pa-rea-rekommendationer-on-sale","text":"Rekommendera produkter som \u00e4r p\u00e5 rea Syfte: \u00d6ka rea fsg genom att visa relevanta produkter p\u00e5 rea. Expression: Trend: Back to top","title":"Produkter p\u00e5 rea rekommendationer: On sale"},{"location":"Platform/Segmentations/Auto-targeting/","text":"Table of Contents Auto-targeting Using Auto-targeting Step 1: Initiate auto-targeting campaign Step 2: Choose recipients Step 3: Create advertisements Clustering Back to top Auto-targeting Note! Before Segmentations you need to train the machine-learning model Choose the data model and edit it Scroll to the bottom and enable the ML Engine, see image below, and click Save Make sure the platform has been added to the k8s-ml-registry After the machine-learning model has been trained you can create segmentations. What about the parameters in the ML model? The problem with the model and the parameters is that this really isn't straightforward. In principle you want as much data as possible. The default settings just prevent blowing up the worker with an enormous dataset accidentally. There are a few dataset specific details that may make smaller limits sensible. For example, if a customer has high item turnover and you want to exclude old transactions and items that don't really contribute to current recommendations anymore if they are included in the model. But that is fairly difficult to reason about The default settings should be fine most of the time. Especially if the customer has less than 1000 actively sold items at the moment I wouldn't expect the limits to have much of an effect. The first limit should probably be clarified a bit. Maybe \"Min interactions per item\", because I suspect that it excludes items that have fewer than the specified number of interactions. This makes sense because we can't really learn anything useful about items that have very few transactions (I guess that is fairly intuitive, there's just no information to look at) Back to top Using Auto-targeting Auto-targeting identifies optimal combinations of items and users that helps increase conversion in campaigns. The results are based on the results from the machine-learning models. The result is groups with recommended users-items combinations to use in the advertisements, see the overview below: graph TD; Campaign-- SelectRecipients; SelectRecipients-- Advertisement1; SelectRecipients-- Advertisement2; SelectRecipients-- Advertisement3; Advertisement1-- SelectItems1; Advertisement2-- SelectItems2; Advertisement3-- SelectItems3; SelectItems1-- AddFilters1; SelectItems2-- AddFilters2; SelectItems3-- AddFilters3; Back to top Step 1: Initiate auto-targeting campaign Choose the Auto Targeting tab Create a new auto-targeting campaign by clicking the + icon in the upper right corner Name the auto-targeting model (in the image below Auto-targeting test ), and choose the maximum number of recipients for the campaign. Note that Available recipients indicates the total number of users that exists in the data Back to top Step 2: Choose recipients After the campaign has been created, now it's time to set the recipients (audience) for the campaign. To filter the data for various campaigns, click the filter icon to the right of the user icon Choose a filter according to your needs. In the below image, users have been filtered to contains those with age 20-25 that are registered in Sweden. Back to top Step 3: Create advertisements To set up an advertisement click the + icon under the auto-targeting card. Name the advertisement and click the + icon and Select items to target This will trigger some settings to pop up above. * ignore already consumed : used to block so that users do not end up in a campaign that they already bought from. For example, if you have a campaign including Product1 and a user has already bought that product, then you may want to make sure that the user can not end up in a campaign inlcuding that product. * Trend : If you choose a high trend value, then seasonal trends in sales will have higher weight (e.g. during Christmas more Santa Claus-products are probably sold) * Item.multiplier (?) and Recipient multiplier (?) : These can be ignored. The idea is that you can weight the score for a user or item. Ex: item.price, or user.propensity for item resp. user. But it is experimental and seldom used. Now you can choose to add how many items to include in your advertisement, and what filters should apply. You can also add additionalt filters for the recipients. When ready, press Save and Run . The result will look similar to the image below. You can see the products included in the advertisement, the number of recipients, and an average recipient score and its distribution. The recipient score is a value from 0 to 1, where 1 indicates a very strong match between the user and the advertisement. In this case, a recommendation would be to only use the first 30% recipients or so in the advertisement, since the scores for the long tail of users is low. Back to top Clustering Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: 1. embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, 2. plsa , Probabilistic Latent Semantic Analysis run separately, and 3. modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model. Back to top","title":"Auto-targeting"},{"location":"Platform/Segmentations/Auto-targeting/#table-of-contents","text":"Auto-targeting Using Auto-targeting Step 1: Initiate auto-targeting campaign Step 2: Choose recipients Step 3: Create advertisements Clustering Back to top","title":"Table of Contents"},{"location":"Platform/Segmentations/Auto-targeting/#auto-targeting","text":"Note! Before Segmentations you need to train the machine-learning model Choose the data model and edit it Scroll to the bottom and enable the ML Engine, see image below, and click Save Make sure the platform has been added to the k8s-ml-registry After the machine-learning model has been trained you can create segmentations. What about the parameters in the ML model? The problem with the model and the parameters is that this really isn't straightforward. In principle you want as much data as possible. The default settings just prevent blowing up the worker with an enormous dataset accidentally. There are a few dataset specific details that may make smaller limits sensible. For example, if a customer has high item turnover and you want to exclude old transactions and items that don't really contribute to current recommendations anymore if they are included in the model. But that is fairly difficult to reason about The default settings should be fine most of the time. Especially if the customer has less than 1000 actively sold items at the moment I wouldn't expect the limits to have much of an effect. The first limit should probably be clarified a bit. Maybe \"Min interactions per item\", because I suspect that it excludes items that have fewer than the specified number of interactions. This makes sense because we can't really learn anything useful about items that have very few transactions (I guess that is fairly intuitive, there's just no information to look at) Back to top","title":"Auto-targeting"},{"location":"Platform/Segmentations/Auto-targeting/#using-auto-targeting","text":"Auto-targeting identifies optimal combinations of items and users that helps increase conversion in campaigns. The results are based on the results from the machine-learning models. The result is groups with recommended users-items combinations to use in the advertisements, see the overview below: graph TD; Campaign-- SelectRecipients; SelectRecipients-- Advertisement1; SelectRecipients-- Advertisement2; SelectRecipients-- Advertisement3; Advertisement1-- SelectItems1; Advertisement2-- SelectItems2; Advertisement3-- SelectItems3; SelectItems1-- AddFilters1; SelectItems2-- AddFilters2; SelectItems3-- AddFilters3; Back to top","title":"Using Auto-targeting"},{"location":"Platform/Segmentations/Auto-targeting/#step-1-initiate-auto-targeting-campaign","text":"Choose the Auto Targeting tab Create a new auto-targeting campaign by clicking the + icon in the upper right corner Name the auto-targeting model (in the image below Auto-targeting test ), and choose the maximum number of recipients for the campaign. Note that Available recipients indicates the total number of users that exists in the data Back to top","title":"Step 1: Initiate auto-targeting campaign"},{"location":"Platform/Segmentations/Auto-targeting/#step-2-choose-recipients","text":"After the campaign has been created, now it's time to set the recipients (audience) for the campaign. To filter the data for various campaigns, click the filter icon to the right of the user icon Choose a filter according to your needs. In the below image, users have been filtered to contains those with age 20-25 that are registered in Sweden. Back to top","title":"Step 2: Choose recipients"},{"location":"Platform/Segmentations/Auto-targeting/#step-3-create-advertisements","text":"To set up an advertisement click the + icon under the auto-targeting card. Name the advertisement and click the + icon and Select items to target This will trigger some settings to pop up above. * ignore already consumed : used to block so that users do not end up in a campaign that they already bought from. For example, if you have a campaign including Product1 and a user has already bought that product, then you may want to make sure that the user can not end up in a campaign inlcuding that product. * Trend : If you choose a high trend value, then seasonal trends in sales will have higher weight (e.g. during Christmas more Santa Claus-products are probably sold) * Item.multiplier (?) and Recipient multiplier (?) : These can be ignored. The idea is that you can weight the score for a user or item. Ex: item.price, or user.propensity for item resp. user. But it is experimental and seldom used. Now you can choose to add how many items to include in your advertisement, and what filters should apply. You can also add additionalt filters for the recipients. When ready, press Save and Run . The result will look similar to the image below. You can see the products included in the advertisement, the number of recipients, and an average recipient score and its distribution. The recipient score is a value from 0 to 1, where 1 indicates a very strong match between the user and the advertisement. In this case, a recommendation would be to only use the first 30% recipients or so in the advertisement, since the scores for the long tail of users is low. Back to top","title":"Step 3: Create advertisements"},{"location":"Platform/Segmentations/Auto-targeting/#clustering","text":"Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: 1. embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, 2. plsa , Probabilistic Latent Semantic Analysis run separately, and 3. modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model. Back to top","title":"Clustering"},{"location":"Platform/Segmentations/Clustering/","text":"Table of Contents Clustering Back to top Clustering Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, plsa , Probabilistic Latent Semantic Analysis run separately, and modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model. Back to top","title":"Clustering"},{"location":"Platform/Segmentations/Clustering/#table-of-contents","text":"Clustering Back to top","title":"Table of Contents"},{"location":"Platform/Segmentations/Clustering/#clustering","text":"Clustering makes it possible to group users and items into a specified number of clusters. For finding cluster, there are three different algorithms that can be used: embedding with item clusters from the trained machine-learning model and users assigned to the most connected cluster, plsa , Probabilistic Latent Semantic Analysis run separately, and modularity , network-based modularity optimization run separately. embedding is the fastest method since it uses the trained machine-learning model. Back to top","title":"Clustering"}]}